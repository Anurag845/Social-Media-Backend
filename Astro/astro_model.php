<?phpclass Astro_model extends Model {    public $memcache;    public $d2r;    public $r2d;    public $ra, $dc;    // right ascension, declination    public $pln,$plt;   // parallax longitude and latitude    public $lord;    public $lord1;    public $dasha;    public $zn;     // Zodiac    public $znl;    // Zodiac    public $zsign;    public $range;    public $naks;    function Astro_model() {        parent::Model();        $this->memcache = new Memcache;        $this->memcache->connect('localhost', 11211) or die();    }    function calc_transits ($day1, $month1, $year1, $hour1, $minute1, $timezone1, $start_day, $start_month, $start_year, $orb, &$result) {        global $SWEPH_PATH;        $swephsrc = $SWEPH_PATH; //'f:\personal\wwwprojects\emotnote\application\models\sweph';        $sweph = $SWEPH_PATH;   //'f:\personal\wwwprojects\emotnote\application\models\sweph';        //putenv("PATH=$PATH:$swephsrc");        //natal planet calculations        unset($PATH,$out,$pl_name,$longitude1);			// unset any variables not initialized elsewhere in the program        $inmonth = $month1;        $inday = $day1;        $inyear = $year1;        $inhours = $hour1;        $inmins = $minute1;        $insecs = "0";        $intz = $timezone1;        $abs_tz = abs($intz);        $the_hours = floor($abs_tz);        $fraction_of_hour = $abs_tz - floor($abs_tz);        $the_minutes = 60 * $fraction_of_hour;        $whole_minutes = floor(60 * $fraction_of_hour);        $fraction_of_minute = $the_minutes -$whole_minutes;        $whole_seconds = round(60 * $fraction_of_minute);        if ($intz >= 0) {            $inhours = $inhours - $the_hours;            $inmins = $inmins - $whole_minutes;            $insecs =  $insecs - $whole_seconds;        }        else {            $inhours = $inhours + $the_hours;            $inmins = $inmins + $whole_minutes;            $insecs =  $insecs + $whole_seconds;        }        $last_planet = 10;			//this indicates Sun - Chiron        // adjust date and time for minus hour due to time zone taking the hour negative        $utdatenow = strftime("%d.%m.%Y", mktime($inhours, $inmins, $insecs, $inmonth, $inday, $inyear));        $utnow = strftime("%H:%M:%S", mktime($inhours, $inmins, $insecs, $inmonth, $inday, $inyear));        session_write_close();        exec ("$SWEPH_PATH\swetest -edir$sweph -b$utdatenow -ut$utnow -p0123456789D -eswe -fls -g, -head", $out);        $longitude1 = array();        $speed1 = array();        // Each line of output data from swetest is exploded into array $row, giving these elements:        // 0 = longitude        // 1 = speed        // planets are index 0 - index ($last_planet)        foreach ($out as $key => $line) {            $row = explode(',',$line);            $longitude1[$key] = $row[0];            $speed1[$key] = $row[1];        };        //transit calculations        unset($out,$longitude2,$speed2);					// unset any variables not initialized elsewhere in the program        // get all variables from form - Transits        //get todays date and time        $name2 = "Transits";        $inmonth = $start_month;        $inday = $start_day;        $inyear = $start_year;        $hour2 = gmdate("H");        $minute2 = gmdate("i");        $timezone2 = 0;        $inhours = $hour2;        $inmins = $minute2;        $insecs = "0";        $intz = $timezone2;        // adjust date and time for minus hour due to time zone taking the hour negative        $utdatenow = strftime("%d.%m.%Y", mktime($inhours, $inmins, $insecs, $inmonth, $inday, $inyear));        $utnow = strftime("%H:%M:%S", mktime($inhours, $inmins, $insecs, $inmonth, $inday, $inyear));        session_write_close();        exec ("$SWEPH_PATH\swetest -edir$sweph -b$utdatenow -ut$utnow -p0123456789D -eswe -fls -g, -head", $out);	//add a planet        $longitude2 = array();        $speed2 = array();        // Each line of output data from swetest is exploded into array $row, giving these elements:        // 0 = longitude        // 1 = speed        // planets are index 0 - index ($last_planet)        foreach ($out as $key => $line) {            $row = explode(',',$line);            $longitude2[$key] = $row[0];            $speed2[$key] = $row[1];        };        // display transit data - aspect table        $pl_name[0] = "Sun";        $pl_name[1] = "Moon";        $pl_name[2] = "Mercury";        $pl_name[3] = "Venus";        $pl_name[4] = "Mars";        $pl_name[5] = "Jupiter";        $pl_name[6] = "Saturn";        $pl_name[7] = "Uranus";        $pl_name[8] = "Neptune";        $pl_name[9] = "Pluto";        $pl_name[10] = "Chiron";        $asp_name[1] = "Conjunct";        $asp_name[2] = "Opposite";        $asp_name[3] = "Trine";        $asp_name[4] = "Square";        $asp_name[5] = "Quincunx";        $asp_name[6] = "Sextile";        $result = array();        $cnt = 0;        for ($i = 0; $i <= $last_planet - 1; $i++) {            for ($j = 0; $j <= $last_planet; $j++) {                $q = 0;                $da = Abs($longitude2[$i] - $longitude1[$j]);                if ($da > 180) {                    $da = 360 - $da;                }                // is there an aspect within orb?                if ($da <= $orb) {                    $q = 1;                    $dax = $da;                }                elseif (($da <= (60 + $orb)) And ($da >= (60 - $orb))) {                    $q = 6;                    $dax = $da - 60;                }                elseif (($da <= (90 + $orb)) And ($da >= (90 - $orb))) {                    $q = 4;                    $dax = $da - 90;                }                elseif (($da <= (120 + $orb)) And ($da >= (120 - $orb))) {                    $q = 3;                    $dax = $da - 120;                }                elseif (($da <= (150 + $orb)) And ($da >= (150 - $orb))) {                    $q = 5;                    $dax = $da - 150;                }                elseif ($da >= (180 - $orb)) {                    $q = 2;                    $dax = 180 - $da;                }                if ($q > 0) {                    // aspect exists                    $result[0][$cnt] = $pl_name[$i];                    $result[1][$cnt] = $asp_name[$q];                    $result[2][$cnt] = $pl_name[$j];                    $result[3][$cnt] = sprintf("%.2f", abs($dax));                    $cnt++;                }            }        }    }    function get_transit_id ($transit_name) {        $sql = "select transit_id from transit_t where transit_name = '$transit_name'";        $key = md5($sql);        $transit_id = $this->memcache->get($key);        if ($transit_id == null) {            $query = $this->db->query ($sql);            if ($query->num_rows() > 0) {                $row = $query->row();                $transit_id = $row->transit_id;            }            $this->memcache->set($key,$transit_id,0,0);            $transit_id = $this->memcache->get($key);        }        return $transit_id;    }    function astro_calc ($bdd, $bmm, $byy, $hh, $mi, $birth_tz, $dasha_dd, $dasha_mm, $dasha_yy,            &$o_moonsign, &$o_nakshatra, &$o_birth_mahadasha, &$o_birth_antardasha, &$o_birth_pratyantardasha,            &$o_date_mahadasha, &$o_date_antardasha, &$o_date_pratyantardasha) {                $this->d2r = pi()/180;        $this->r2d = 180/pi();        $d2r = $this->d2r;        $r2d = $this->r2d;        $this->lord = "KeVeSuMoMaRaJuSaMe";        $this->lord1 = "KetVenSunMonMarRahJupSatMer";        $this->dasha = array(7,20,6,10,7,18,16,19,17);        $this->zn = "AriTauGemCanLeoVirLibScoSagCapAquPis";  // Zodiac        $this->znl = "Aries~Taurus~Gemini~Cancer~Leo~Virgo~Libra~Scorpio~Sagittarius~Capricorn~Aquarius~Pisces";  // Zodiac        $this->zsign = explode("~", $this->znl);        $this->range = array(1,12,1,31,1800,2100,0,23,0,59,0,0,0,12,0,59,0,179,0,59,0,0,0,89,0,59);        $this->naks = array("Ashwini","Bharani","Krittika","Rohini","Mrigashira","Ardra","Punarvasu",                "Pushya","Ashlesha","Magha","Purva Phalguni","Uttara Phalguni","Hasta","Chitra","Swati",                "Vishakha","Anuradha","Jyeshtha","Mula","Purva Shadya","Uttara Shadya","Shravana",                "Dhanishtha","Shatbisha","Purva Bhadrapada","Uttara Bhadrapada","Revati");        $mon    = floor($bmm);        $day    = floor($bdd);        $year   = floor($byy);        $hr     = floor($hh);        $hr	+= floor($mi)/60;        $tz     = $birth_tz;        $ln     = $tz * 15;        $la     = 0;        // checks for checked DST, East, South        $dst = null;    //document.LunarCalc.DST;        $eln = null;    //document.LunarCalc.East;        $sla = null;    //document.LunarCalc.South;        if($tz > 0.0)            $ln = -$ln;        if ($dst) {            if ($ln < 0.0)                $tz++;            else                $tz--;        }        $jd = $this->mdy2julian($mon, $day, $year);        if ($ln < 0.0)            $f = $hr - $tz;        else            $f = $hr + $tz;        $t = ($jd - 2451545 - 0.5)/36525;        $gst = $this->ut2gst($t,$f);        $t = (($jd - 2451545) + $f/24 - 0.5)/36525;        $ay = $this->calcayan($t);        $ob = 23.452294 - 0.0130125 * $t; //  Obliquity of Ecliptic        // Calculate Moon longitude, latitude, and distance using truncated Chapront algorithm        // Moon mean longitude        $l = (218.3164591 + 481267.88134236 * $t);        // Moon mean elongation        $d = (297.8502042 + 445267.1115168 * $t);        // Sun's mean anomaly        $m = (357.5291092 + 35999.0502909 * $t);        // Moon's mean anomaly        $mm = (134.9634114 + 477198.8676313 * $t);        // Moon's argument of latitude        $f = (93.2720993 + 483202.0175273 * $t);        $d *= $this->d2r;        $m *= $this->d2r;        $mm *= $this->d2r;        $f *= $this->d2r;        $e = 1 - 0.002516 * $t - 0.0000074 * $t * $t;        $p =	  6.288774 * sin($mm)                + 1.274027 * sin($d*2-$mm)                + 0.658314 * sin($d*2)                + 0.213618 * sin(2*$mm)                - 0.185116 * $e * sin($m)                - 0.114332 * sin($f*2);        $p +=	  0.058793 * sin($d*2 - $mm * 2)                + 0.057066 * $e * sin($d*2 - $m - $mm)                + 0.053322 * sin($d*2 + $mm)                + 0.045758 * $e * sin($d*2 - $m)                - 0.040923 * $e * sin($m - $mm)                - 0.034720 * sin($d)                - 0.030383 * $e * sin($m + $mm);        $p +=	  0.015327 * sin($d*2 - $f*2)                - 0.012528 * sin($mm + $f*2)                + 0.010980 * sin($mm - $f*2)                + 0.010675 * sin($d * 4 - $mm)                + 0.010034 * sin(3 * $mm);        $p +=	  0.008548 * sin($d * 4 - $mm * 2)                - 0.007888 * $e * sin($d * 2 + $m - $mm)                - 0.006766 * $e * sin($d * 2 + $m)                - 0.005163 * sin($d - $mm)                + 0.004987 * $e * sin($d + $m)                + 0.004036 * $e * sin($d*2 - $m + $mm)                + 0.003994 * sin($d * 2 + $mm * 2);        $b = 	  5.128122 * sin($f)                + 0.280602 * sin($mm+$f)                + 0.277693 * sin($mm-$f)                + 0.173237 * sin($d*2-$f)                + 0.055413 * sin($d*2-$mm+$f)                + 0.046271 * sin($d*2-$mm-$f);        $b += 	  0.032573 * sin(2*$d + $f)                + 0.017198 * sin(2*$mm + $f)                + 0.009266 * sin(2*$d + $mm - $f)                + 0.008823 * sin(2*$mm - $f)                + 0.008247 * $e * sin(2*$d - $m - $f)                + 0.004324 * sin(2*$d - $f - 2*$mm);        $b += 	  0.004200 * sin(2*$d +$f+$mm)                + 0.003372 * $e * sin($f - $m - 2 * $d)                + 0.002472 * $e * sin(2*$d+$f-$m-$mm)                + 0.002222 * $e * sin(2*$d + $f - $m)                + 0.002072 * $e * sin(2*$d-$f-$m-$mm)                + 0.001877 * $e * sin($f-$m+$mm);        $b += 	  0.001828 * sin(4*$d-$f-$mm)                - 0.001803 * $e * sin($f+$m)                - 0.001750 * sin(3*$f)                + 0.001570 * $e * sin($mm-$m-$f)                - 0.001487 * sin($f+$d)                - 0.001481 * $e * sin($f+$m+$mm);        $r =	- 20905.355 * cos($mm)                -  3699.111 * cos($d*2-$mm)                -  2955.968 * cos($d*2)                -   560.925 * cos(2*$mm)                -    48.888 * $e * cos($m)                -     3.149 * cos($f*2);        $r =	  0.950724 + 0.051818  * cos($mm)                + 0.009531 * cos(2*$d - $mm)                + 0.007843 * cos(2*$d)                + 0.002824 * cos(2*$mm)                + 0.000857 * cos(2*$d + $mm)                + 0.000533 * $e * cos(2*$d - $m);        $r += 	  0.000401 * $e * cos(2*$d-$m-$mm)                + 0.000320 * $e * cos($mm-$m)                - 0.000271 * cos($d)                - 0.000264 * $e * cos($m+$mm)                - 0.000198 * cos(2*$f - $mm)                + 0.000173 * cos(3 * $mm);        $r += 	  0.000167 * cos(4*$d - $mm)                - 0.000111 * $e * cos($m)                + 0.000103 * cos(4*$d - 2*$mm)                - 0.000084 * cos(2*$mm - 2*$d)                - 0.000083 * $e * cos(2*$d + $m)                + 0.000079 * cos(2*$d + 2*$mm)                + 0.000072 * cos(4*$d);        $l += $p;        while($l < 0.0)            $l += 360.0;        while($l > 360.0)            $l -= 360.0;        //  Parallax calculations are found in Meeus, Duffett-Smith, Astrologic Almanac (etc)        //  Topocentric calculations are done on RA and DEC        // start parallax calculations        $this->ecl2equ($l,$b,$ob);        $ln = -$ln; // flip sign of longitude        $ln /= 15;        $ln += $gst;        while($ln < 0.0)            $ln += 24;        while($ln > 24.0)            $ln -= 24;        $h = ($ln - $this->ra) * 15;        // calc observer latitude vars        $u = atan(0.996647 * tan($this->d2r *$la));        // hh = alt/6378140; // assume sea level        $s = 0.996647 * sin($u); // assume sealevel        $c = cos($u);	// + hh * cos(d2r(la)); // cos la' -- assume sea level        $r = 1/sin($this->d2r * $r);        $dlt = atan2($c * sin($this->d2r*$h),$r * cos($this->d2r * $this->dc) - $c * cos($this->d2r* $h));        $dlt *= $this->r2d;        $hh = $h + $dlt;        $dlt /= 15;        $this->ra -= $dlt;        $this->dc = atan(cos($d2r * $hh) * (($r * sin($this->d2r * $this->dc) - $s)/                        ($r * cos($d2r *$this->dc) * cos($d2r*$h) - $c)) );        $this->dc *= $r2d;        $this->equ2ecl($this->ra,$this->dc,$ob);        // dasha calculations        $l += $ay;        if($l < 0.0)            $l += 360.0;        //echo "Moonsign: " . $this->moonsign($l) . "<br>";        $o_moonsign = $this->moonsign($l);        $this->lon2zodiac($l);        $nk = ($l * 60)/800.0;	// get nakshatra        //echo "document.display.nnakshatra.value = " . $this->naks[floor($nk)] . "<br>";        $o_nakshatra = $this->naks[floor($nk)];        $nl = floor($nk) % 9;        $db = 1 - ($nk - floor($nk));        $bk = $this->calcbhukti($db,$nl);        $ndasha = ($db * $this->dasha[$nl]) * 365.25;        $jd1 = $jd + $ndasha;        $d1 = $nl;        $pd = $this->calcpraty($db,$nl);        //echo "document.display.npdasha.value = " . substr($this->lord1,$nl*3,3) . "/" . substr($this->lord1,$bk*3,3) . "/" . substr($this->lord1, $pd*3,3) . "<br>";        $o_birth_mahadasha = substr($this->lord1,$nl*3,3);        $o_birth_antardasha = substr($this->lord1,$bk*3,3);        $o_birth_pratyantardasha = substr($this->lord1, $pd*3,3);        $nl++;        if($nl == 9)            $nl = 0;        $str = substr($this->lord1,$nl*3,3) . "/" . substr($this->lord1,$nl*3,3) . "  ";        $str += $this->jul2mdy($jd1);        //echo "document.display.npnextdasha.value = " . $str . "<br>";        // Parallax Dasha        $this->pln += $ay;        if($this->pln < 0.0)            $this->pln += 360.0;        $nk = ($this->pln * 60)/800.0;	// get nakshatra        $nl = floor($nk) % 9;        $db = 1 - ($nk - floor($nk));        $bk = $this->calcbhukti($db,$nl);        $ndasha = ($db * $this->dasha[$nl]) * 365.25;        $jd2 = $jd + $ndasha;        $this->jul2mdy($jd2);        $diff = round(abs($jd2-$jd1)); // find difference in days        if($d1 != $nl) {            if($d1 < $nl)                $diff = $this->dasha[$nl] * 365.25 - $diff;            else                $diff = $this->dasha[$d1] * 365.25 - $diff;            $diff = round(abs($diff));        }        $pd = $this->calcpraty($db,$nl);        $nl++;        if($nl == 9)            $nl = 0;        $str = substr($this->lord,$nl*2,2) . "/" . substr($this->lord, $nl*2,2) . "  ";        $str += $this->jul2mdy($jd2);        // display difference in years, months, days        $str = "";        $x = floor($diff/365.25);        if($x) {            $str = $x . " year ";            $diff -= 365.25;        }        $x = floor($diff/30);        if($x)            $str .= $x . " month(s) ";        $str .= floor($diff % 30) + " days";        // Calculate current dasha/bhukti        // do something if it is the current or future date        $mon = date('m');        $day = date('d');        $year = date('Y');        $curjd = $this->mdy2julian($dasha_mm,$dasha_dd,$dasha_yy);        $cd = $curjd - $jd1;        $d1++;        if($d1 == 9)            $d1= 0;        $this->calccurdasha($cd,$d1, $o_date_mahadasha, $o_date_antardasha, $o_date_pratyantardasha);        $cd = $curjd - $jd2;    }    function calccurdasha($cd, $nl, &$o_date_mahadasha, &$o_date_antardasha, &$o_date_pratyantardasha) {        // check for > 120 years        while($cd < 0)            $cd += 43830;        $len = 0;        for($i = 0; $i < 9; $i++) {            $len += $this->dasha[$nl] * 365.25;            if($len > $cd)                break;            $nl++;            if($nl == 9)                $nl = 0;        }        $cd = $len - $cd;        $cd /= $this->dasha[$nl] * 365.25;        $bk = $this->calcbhukti($cd,$nl);        $pd = $this->calcpraty($cd,$nl);        $str = substr($this->lord1, $nl*3, 3) . "/" . substr($this->lord1, $bk*3, 3) . "/" . substr($this->lord1, $pd*3, 3);        $o_date_mahadasha = substr($this->lord1, $nl*3, 3);        $o_date_antardasha = substr($this->lord1, $bk*3, 3);        $o_date_pratyantardasha = substr($this->lord1, $pd*3, 3);        return $str;    }    function calcbhukti($db, $dp) {        $x = 1 - $db; // find days elapsed        $y = 0;        $buk = $dp;        for($i = 0; $i < 9; $i++) {            $y += $this->dasha[$buk]/120; // percentage of period            if($y > $x)                break;            $buk++;            if($buk == 9)                $buk = 0;        }        return $buk;    }    function calcpraty($db, $dp) {        $x = 1 - $db; // find days elapsed        $y = 0;        $bk1 = $dp;        for($i = 0; $i < 9; $i++) {            $y += $this->dasha[$bk1]/120; // percentage of period            if($y > $x)                break;            $bk1++;            if($bk1 == 9)                $bk1 = 0;        }        $y = $y - $x; // find days left over        $y = $y/($this->dasha[$bk1]/120);  // % of this bukti to go        return $this->calcbhukti($y, $bk1);    }// Calculate Ayanamsa using J2000 Epoch    function calcayan($t) {        $d2r = $this->d2r;        $ln = 125.0445550 - 1934.1361849 * $t + 0.0020762 * $t * $t; // Mean lunar node        $off = 280.466449 + 36000.7698231 * $t + 0.00031060 * $t * $t; // Mean Sun        $off = 17.23*sin($d2r * $ln)+1.27*sin($d2r * $off)-(5025.64+1.11*$t)*$t;        $off = ($off- 85886.27)/3600.0;        return $off;    }    function jul2mdy($JD) {        $str = "";        $L  = floor($JD + 0.5)+68569;        $N  = floor((4*$L)/146097);        $L  -= floor((146097*$N + 3)/4);        $IT = floor((4000*($L+1))/1461001);        $L  -= floor((1461*$IT)/4) - 31;        $JT = floor((80*$L)/2447);        $K  = $L- floor((2447*$JT)/80);        $L  = floor($JT/11);        $JT += 2 - 12*$L;        $IK = 100*($N-49) + $IT + $L;        $str = "(m/d/y) ";        $str += floor($JT);		// month        $str += "/" + floor($K);	// day        $str += "/" + floor($IK);	// year        return $str;    }    function ut2gst($t,$ut) {        $t0 = 6.697374558 + (2400.051336 * $t) + (0.000025862 * $t * $t);        $ut *= 1.002737909;        $t0 += $ut;        while($t0 < 0.0)            $t0 += 24;        while($t0 > 24.0)            $t0 -= 24;        return $t0;    }    function mdy2julian ($m, $d, $y) {        $im = 12 * ($y + 4800) + $m - 3;        $j = (2 * ($im - floor($im/12) * 12) + 7 + 365 * $im)/12;        $j = floor($j) + $d + floor($im/48) - 32083;        if($j > 2299171)            $j += floor($im/4800) - floor($im/1200) + 38;        return $j;    }    function ecl2equ($ln, $la, $ob) {        $d2r = $this->d2r;        $r2d = $this->r2d;        $y = asin(sin($d2r * $la ) * cos($d2r * $ob ) + cos($d2r * $la ) * sin($d2r * $ob ) * sin($d2r * $ln));        $this->dc = $r2d * $y;        $y = sin($d2r *$ln ) * cos($d2r * $ob) - tan($d2r * $la) * sin($d2r * $ob);        $x = cos($d2r * $ln);        $x = atan2($y,$x);        $x = $r2d * $x;        if($x < 0.0)            $x += 360;        $this->ra = $x/15;    }    function equ2ecl($ra,$dc,$ob) {        $d2r = $this->d2r;        $r2d = $this->r2d;        $ra *= 15;        $y = sin($d2r *$ra) * cos($d2r * $ob) + tan($d2r *$dc) * sin($d2r * $ob);        $x = cos($d2r * $ra);        $x = atan2($y,$x);        $x *= $r2d;        if($x < 0)            $x += 360;        $this->pln = $x;        $y = asin(sin($d2r * $dc) * cos($d2r * $ob) - cos($d2r * $dc) * sin($d2r * $ob) * sin($d2r * $ra));        $this->pla = $r2d * $y;    }    // build string with degrees, minutes, seconds and zodiac sign from longitude    function lon2dmsz($x) {        $d = null;        $m = null;        $s = null;        $x = abs($x);        $d = floor($x);        $m = ($x - $d);        $s = $m * 60;        $m = floor($s);        $s = $s - $m;        $z = floor($d/30);        $d %= 30;        $str = $this->zsign[$z] . " " . $d . "?" . $m . "'" . floor($s * 60) . "\"";        return $str;    }    function moonsign ($x) {        $d = null;        $m = null;        $s = null;        $x = abs($x);        $d = floor($x);        $m = ($x - $d);        $s = $m * 60;        $m = floor($s);        $s = $s - $m;        $z = floor($d/30);        $d %= 30;        $str = $this->zsign[$z];        return $str;    }    // build string with zodiac sign from longitude    function lon2zodiac($x) {        $d = null;        $m = null;        $s = null;        $x = abs($x);        $d = floor($x);        $m = ($x - $d);        $s = $m * 60;        $m = floor($s);        $s = $s - $m;        $z = floor($d/30);        $d %= 30;        $str2 = $d . "? " . $m . "' " . floor($s * 60) . "\" " . $this->zsign[$z];        return $str2;    }    // keep within 360 degrees    function fix360($v) {        while($v < 0.0)            $v += 360;        while($v > 360)            $v -= 360;        return $v;    }    function dir() {        session_write_close();        exec ("dir c:\ > f:\dir.txt");    }}?>