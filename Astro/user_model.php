<?phpglobal $URLS;class User_model extends Model {    function User_model() {        parent::Model();        //$this->load->library('session');        //session_start();        global $FB_CONFIG;        $this->load->library('facebook', $FB_CONFIG);        $this->load->model('security_model');        $this->load->model('astro_model');        $this->load->model('parashara_model');        $this->load->model('notification_model');    }    function username_check($username) {        global $URLS;        $this->db->where('username', $username);        // $this->db->limit(10);        $query = $this->db->get('member_t');        if ($query->num_rows() > 0) {            $use = 'username is not available';            $ret = "<span>&nbsp";            $ret .= "<img src=". $URLS['IMAGES'] . "redarrow.png";            $ret .= " width=14 height=14 />&nbsp; $use </span>";            $ret = 'false';            return $ret;        } else {            $use = 'username is available';            $ret = "<span>&nbsp";            $ret .= "<img src=". $URLS['IMAGES'] . "greentick.png";            $ret .= " width=14 height=14 />&nbsp; $use </span>";            $ret = 'true';            return $ret;        }    }    /*     * Do signup and login based on facebook login data    */    function do_signup_login ($fbatok=null, $me=null, $password=null) {        // $session & $me may even come externally through API, e.g. from mobile application        if ($fbatok || $me)            $api_flag = 1;        else            $api_flag = 0;        if (!$api_flag) {            //$session = $this->facebook->getSession();            //if (empty($session['access_token'])) {            //    log_message ('error', 'Empty access_token');            //    redirect ('/');            //}            $fbuser = $this->facebook->getUser();            if (!$fbuser) {                log_message ('error', '0 user');                redirect ('/');            }        }        // Fetch logged in facebook user        if (!$api_flag) {            $me = null;            try {                $me = $this->facebook->api ('/me');            }            catch (FacebookApiException $e) {                log_message ('error', 'Exception: Could not fetch logged in facebook user' . $e.message);                //print_r ($e); exit;                redirect ('/');            }        }        $fb_id = $me['id'];        // Check if user already exists in mevine        $sql = "select * from member_t where fb_id = $fb_id";        $query = $this->db->query ($sql);        $new_password = "";        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row_array();                $this->replicate_facebook_info($me, $row);            }            else {                $ret = $this->insert_facebook_info ($me);                $password = $new_password = $ret['password'];            }            if (!$api_flag) {                // fb_login updates cookies etc.                $fbatok = $this->facebook->getAccessToken();                $ret = $this->fb_login ($fb_id, $fbatok);            }            else {                // Minimal function without any cookie reference                $ret = $this->fb_login2 ($fb_id, $fbatok, $me, $password, $new_password);            }        }        else {            $ret = null;        }        return $ret;    }    function insert_facebook_info ($me) {        $this->db->set('fb_id', $me['id']);        $this->db->set('profile_pic', 'https://graph.facebook.com/'.$me['id'].'/picture');        $birth_date = $me['birthday'];  // mm/dd/yyyy        $birth_date = explode("/",$birth_date);        $this->db->set('birth_yy',$birth_date[2]);        $this->db->set('birth_mm',$birth_date[0]);        $this->db->set('birth_dd',$birth_date[1]);        $this->db->set('sunsign', $this->getsunsign($birth_date[1], $birth_date[0]));        $this->astro_model->astro_calc($birth_date[1], $birth_date[0], $birth_date[2], 0, 0, $me['timezone'],                $birth_date[1], $birth_date[0], $birth_date[2],                $moonsign, $nakshatra, $b_maha, $b_antar, $b_pratyantar, $p_maha, $p_antar, $p_pratyantar);        $this->db->set('moonsign', $moonsign);        $this->db->set('destiny_number',                $this->calc_number($me['first_name']."".$me['last_name'], 'destiny'));        $this->db->set('soulurge_number',                $this->calc_number($me['first_name']."".$me['last_name'], 'soulurge'));        $lifepath_number = intval($birth_date[0].$birth_date[1].$birth_date[2]);        $lifepath_number = $this->sumofdigits($lifepath_number);        $this->db->set('lifepath_number', $lifepath_number);        $birth_date = $birth_date[2]."-".$birth_date[0]."-".$birth_date[1];        $this->db->set('first_name', $me['first_name']);        $this->db->set('last_name', $me['last_name']);        $this->db->set('full_name', $me['name']);        $this->db->set('email', $me['email']);        $this->db->set('username', $me['email']);        if (isset($me['location'])) {            $this->db->set('fb_location', $me['location']['name']);            $this->db->set('current_city', $me['location']['name']);        }        if (isset($me['gender']))            $this->db->set('gender', $me['gender']);        $this->db->set('birth_date',$birth_date);        if (isset($me['timezone'])) {            $this->db->set('current_tz', $me['timezone']);            $this->db->set('birth_tz', $me['timezone']);        }        if (isset($me['hometown']['name'])) {            $this->db->set('fb_hometown', $me['hometown']['name']);            $this->db->set('birth_city', $me['hometown']['name']);        }        $password = $this->security_model->random_password();        $this->db->set('clear_password', $password);        $this->db->set('password', md5($password));        $this->db->set('status', 1);        if ($this->db->insert('member_t') == true) {            $inserted_id = $this->db->insert_id();            $sql = "update memberid_t set max_member_id = " . $inserted_id;            $query = $this->db->query ($sql);            // A little bit of hardcoding here, at least for some time            // I want to follow all new members!            $sql  = "insert ignore into following_t (member_id, following_id, status)";            $sql .= " values (41, $inserted_id, 1)";            $query = $this->db->query ($sql);            // We'll do one more thing here...            // Put this newly created user in the 'following' list of users who had sent an invitation to join            $this->merge_invitations_into_follow($inserted_id, $me['id']);            $this->merge_email_invitations_into_follow($inserted_id, $me['email']);            $ret = array(                    'status'    => 0,                    'response'  => 'Account created',                    'id'        => $inserted_id,                    'password'  => $password            );            // Send welcome email            $this->notification_model->welcome_email($me['name'], $me['email'], $password);            return $ret;   // Everything ok, return back success code        }        else {            $ret = array(                    'status'    => -3,                    'response'  => 'Unexpected database error',                    'id'        => 0,                    'password'  => null            );            return $ret;  // Unexpected db error, such as duplicate primary key        }    }    function replicate_facebook_info ($fb, $local) {        /* Flag values as follows...         *      0 - No change required         *      1 - Nameinfo changed (recalculate soulurge and destiny numbers)         *      2 - Birthdate changed (recalculate sunsign, lifepath number, dd, mm, yy, post transits)         *      3 - Location changed (update birth_city, current_city, fb_hometown, fb_location)        */        $flag_nm = 0;        $flag_bd = 0;        $flag_loc = 0;        $flag_other = 0;        if ($fb['first_name'] != $local['first_name']) {            $flag_nm = 1;            $this->db->set ('first_name', $fb['first_name']);        }        if ($fb['last_name'] != $local['last_name']) {            $flag_nm = 1;            $this->db->set ('last_name', $fb['last_name']);        }        if ($fb['name'] != $local['full_name']) {            $flag_nm = 1;            $this->db->set ('full_name', $fb['name']);        }        if ($fb['email'] != $local['email']) {            $flag_other = 1;            $this->db->set ('email', $fb['email']);        }        if ($fb['gender'] != $local['gender']) {            $flag_other = 1;            $this->db->set ('gender', $fb['gender']);        }        if ($flag_nm > 0) {            $this->db->set('destiny_number',                    $this->calc_number($fb['first_name'].$local['middle_name'].$fb['last_name'], 'destiny'));            $this->db->set('soulurge_number',                    $this->calc_number($fb['first_name'].$local['middle_name'].$fb['last_name'], 'soulurge'));        }        $birth_date = $fb['birthday'];  // mm/dd/yyyy        $birth_date = explode("/",$birth_date);        $fb_dd = intval($birth_date[1]);        $fb_mm = intval($birth_date[0]);        $fb_yy = intval($birth_date[2]);        if (($fb_dd != $local['birth_dd']) && ($fb_mm != $local['birth_mm']) &&                ($fb_yy != $local['birth_yy']) && ($fb['timezone'] != $local['current_tz'])) {            $flag_bd = 1;            $this->db->set('birth_yy',$birth_date[2]);            $this->db->set('birth_mm',$birth_date[0]);            $this->db->set('birth_dd',$birth_date[1]);            $birth_date = $birth_date[2]."-".$birth_date[0]."-".$birth_date[1];            $this->db->set('birth_date', $birth_date);            $this->db->set('current_tz', $fb['timezone']);            $this->db->set('sunsign', $this->getsunsign($fb_dd, $fb_mm));            $lifepath_number = intval($fb_dd.$fb_mm.$fb_yy);            $lifepath_number = $this->sumofdigits($lifepath_number);            $this->db->set('lifepath_number', $lifepath_number);        }        if ($fb['hometown']['name'] != $local['birth_city']) {            $flag_loc = 1;            $this->db->set ('birth_city', $fb['hometown']['name']);            $this->db->set ('fb_hometown', $fb['hometown']['name']);        }        if ($fb['location']['name'] != $local['current_city']) {            $flag_loc = 1;            $this->db->set ('current_city', $fb['location']['name']);            $this->db->set ('fb_location', $fb['location']['name']);        }        // Finally update the database        if ($flag_nm + $flag_bd + $flag_loc + $flag_other > 0) {            $this->db->where('fb_id', $fb['id']);            $this->db->update('member_t');        }    }    function fb_login($fb_id, $fbatok) {        $sql  = "select * from member_t";        $sql .= " where fb_id = $fb_id";        $query = $this->db->query($sql);        if (!$query)            return -2;      // Return wrong username for now        if ($query->num_rows() > 0) {            $row = $query->row();            if ($row->status == -1)                return -1;      // Account not yet activated            if ($row->status != 1)                return -3;      // Account disabled            // Create atok            $fb_id      = $row->fb_id;            $member_id  = $row->member_id;            $fb_atok    = $fbatok;            $mv_atok    = $this->security_model->create_auth_token($member_id, $fb_id, $fb_atok);            // We reached here means authentication was successful, so write session data            $session_data = array (                    'id' => $row->member_id,                    'fb' => $row->fb_id,                    'fn' => $row->first_name,                    'ln' => $row->last_name,                    'bd' => $row->birth_dd . "/" . $row->birth_mm . "/" . $row->birth_yy . "/" . $row->birth_hh . "/" . $row->birth_mi . "/" . $row->birth_tz,                    //'pp' => $row->profile_pic,                    'bz' => $row->birth_tz,                    'cz' => $row->current_tz            );            //log_message('error', 'Setting session: ' . var_export($session_data, true));                        $uid = $row->member_id;            $this->session->set_userdata($session_data);            // Create an auth token for security purpose            $this->security_model->update_auth_token();            $this->update_postcount_cookie ($uid);            // Remove any pending requests that have already expired...            $sql  = "delete from request_t";            $sql .= " where requestor_id = $uid";            $sql .= " and expiry_t <= now()";            $query = $this->db->query ($sql);            // Update pending requests count            $this->update_requestcount_cookie($uid);            // This is for updating transits data in case user is updating birth info            //$this->update_account_info ($uid);            return $uid;        }        else {            return -2;          // Wrong username        }    }    function fb_login2($fb_id, $fbatok, $me, $password, $new_password=null) {        $sql  = "select * from member_t";        $sql .= " where fb_id = $fb_id";        $sql .= " and email = '" . $me['email'] . "'";        $sql .= " and password = '" . md5($password) . "'";        $query = $this->db->query($sql);        if (!$query) {            return array('status' => -4, 'atok' => null);          // Wrong username        }        if ($query->num_rows() > 0) {            $row = $query->row();            if ($row->status == -1)                return array('status' => -1, 'atok' => null, 'response' => 'Account not yet activated');      // Account not yet activated            if ($row->status != 1)                return array('status' => -3, 'atok' => null, 'response' => 'Account disabled');      // Account disabled            // Create atok            $fb_id      = $row->fb_id;            $member_id  = $row->member_id;            $fb_atok    = $fbatok;            $mv_atok    = $this->security_model->create_auth_token($member_id, $fb_id, $fb_atok);            $uid = $row->member_id;            // Remove any pending requests that have already expired...            $sql  = "delete from request_t";            $sql .= " where requestor_id = $uid";            $sql .= " and expiry_t <= now()";            $query = $this->db->query ($sql);            // This is for updating transits data in case user is updating birth info            //$this->update_account_info ($uid);            if (!$new_password)                return array('status' => 0, 'atok' => $mv_atok, 'uid' => $uid);            else                return array('status' => 0, 'atok' => $mv_atok, 'uid' => $uid, 'password' => $new_password);        }        else {            return array('status' => -4, 'atok' => null);          // Wrong username        }    }    function reset_password ($username="") {        $sql = "select count(*) as cnt from member_t where username = '$username'";        $query = $this->db->query ($sql);        if ($query->num_rows() > 0) {            $row = $query->row();            if (!$row->cnt) {                return "This email is not registered in mevine";            }            else {                $clear_password = $this->security_model->random_password();                $md5_password = md5($clear_password);                if ($this->notification_model->new_password_notification ($username, $clear_password)) {                    $this->db->trans_begin();                                        $sql  = "update member_t set password = '$md5_password', clear_password = '$clear_password'";                    $sql .= " where username = '$username'";                    $query = $this->db->query ($sql);                    if ($query) {                        $this->db->trans_commit();                        return "New password is mailed to your email";                    }                    else {                        $this->db->trans_rollback();                        return "Oops! We have encountered an error";                    }                }                else {                    return "Oops! We have encountered an error";                }            }        }    }    function update_notification_preferences($uid=0, $notification_flags=0) {        $sql  = "update member_t set notification_flags = $notification_flags";        $sql .= " where member_id = $uid";        $query = $this->db->query ($sql);        if ($this->db->affected_rows() > 0)            return 1;        else            return -3;  // Unexpected error    }    function get_birthdmy_hhmibz (&$dd, &$mm, &$yy, &$hh=0, &$mi=0, &$bz=0) {        $birth_date = $this->session->userdata ('bd');        if ($birth_date) {            $birth_date = explode("/", $birth_date);            $dd = $birth_date[0];            $mm = $birth_date[1];            $yy = $birth_date[2];            $hh = $birth_date[3];            $mi = $birth_date[4];            $bz = $birth_date[5];        }    }    function insert_user($data) {        /*         * Perform some validations before inserting user in database         *      1. Is the city valid?         *      2. Does this username already exist in the database?        */        //-----------------------------------------        $ret = $this->validate_username ($data['username']);        if ($ret != 0)            return $ret;        $ret = $this->validate_city ($data['birth_country'], $data['birth_city']);        if ($ret['result'] != 0) {            return $ret['result'];        }        else {            $this->db->set('birth_lat', $ret['latitude']);            $this->db->set('birth_long', $ret['longitude']);        }        $ret = $this->validate_city ($data['current_country'], $data['current_city']);        if ($ret['result'] != 0) {            return $ret['result'];        }        else {            $this->db->set('current_lat', $ret['latitude']);            $this->db->set('current_long', $ret['longitude']);        }        $birth_date = $data['birth_date'];        $birth_date = explode("/",$birth_date);        $this->db->set('birth_yy',$birth_date[2]);        $this->db->set('birth_mm',$birth_date[1]);        $this->db->set('birth_dd',$birth_date[0]);        $this->db->set('sunsign', $this->getsunsign($birth_date[0], $birth_date[1]));        $this->db->set('destiny_number',                $this->calc_number($data['first_name'].$data['middle_name'].$data['last_name'], 'destiny'));        $this->db->set('soulurge_number',                $this->calc_number($data['first_name'].$data['middle_name'].$data['last_name'], 'soulurge'));        $lifepath_number = intval($birth_date[0].$birth_date[1].$birth_date[2]);        $lifepath_number = $this->sumofdigits($lifepath_number);        $this->db->set('lifepath_number', $lifepath_number);        $birth_date = $birth_date[2]."-".$birth_date[1]."-".$birth_date[0];        $this->db->set('first_name', $data['first_name']);        $this->db->set('middle_name', $data['middle_name']);        $this->db->set('last_name', $data['last_name']);        $this->db->set('email', $data['email']);        $this->db->set('mobile', $data['mobile']);        $this->db->set('current_city', $data['current_city']);        $this->db->set('birth_hh', $data['b_hh']);        $this->db->set('birth_mi', $data['b_mi']);        $this->db->set('gender', $data['gender']);        $this->db->set('birth_date',$birth_date);        $this->db->set('birth_tz', $data['birth_tz']);        $this->db->set('current_tz', $data['current_tz']);        $this->db->set('birth_city', $data['birth_city']);        $this->db->set('username', $data['username']);        $this->db->set('password', md5($data['password']));        $this->db->set('password_reminder_q', $data['forgot_password_q']);        $this->db->set('password_reminder_a', $data['forgot_password_a']);        $key = md5($data['username'] . md5(now()));        $key = md5($key);        $this->db->set('activation_key', $key);        $this->db->set('status', -1);        if ($this->db->insert('member_t') == true) {            $sql = "update memberid_t set max_member_id = " . $this->db->insert_id();            $query = $this->db->query ($sql);            return 0;   // Everything ok, return back success code        }        else {            return -3;  // Unexpected db error, such as duplicate primary key        }    }    function set_random_password ($uid) {        $clear_password = $this->security_model->random_password();        $password = md5($clear_password);        $sql  = "update member_t";        $sql .= " set clear_password = '$clear_password', password = '$password'";        $sql .= " where member_id = $uid";        $query = $this->db->query ($sql);    }    function validate_username ($username) {        $sql  = "select count(*) as cnt from member_t";        $sql .= " where username = '$username'";        $query = $this->db->query ($sql);        if ($query->num_rows() > 0) {            $row = $query->row();            if ($row->cnt != 0) {                return -1;  // Duplicate username            }            else                return 0;        }        // Unexpected database error        return -3;    }    function validate_city ($country, $city) {        $sql  = "select ct.city_name, ct.latitude, ct.longitude from city_t ct, country_t cnt";        $sql .= " where ct.city_name = '$city'";        $sql .= " and ct.country_code = '$country'";        $sql .= " and ct.country_code = cnt.country_code";        //log_message ('ERROR', $sql);        $query = $this->db->query ($sql);        $result = array();        if ($query->num_rows() > 0) {            $row = $query->row();            $result['result'] = 0;            $result['city_name'] = $row->city_name;            $result['latitude'] = $row->latitude;            $result['longitude'] = $row->longitude;        }        else            $result['result'] = -2;        // Unexpected database error        return $result;    }    function activate_user ($un="", $key="") {        if ($un == "" || $key == "")            return -1;  // Invalid key        $sql  = "select username, activation_key, status from member_t";        $sql .= " where username = '$un'";        $query = $this->db->query ($sql);        if ($query->num_rows() > 0) {            $row = $query->row();            if ($key != $row->activation_key) {                return -1;  // Invalid activation key            }            if ($row->status != -1) {                return -2;  // Key already used            }        }        else {            return -1;        }        // We reached here means everything is ok, so activate account now        $sql  = "update member_t set status = 1 where username = '$un'";        $query = $this->db->query ($sql);        if ($this->db->affected_rows() > 0)            return 1;        else            return -3;  // Unexpected error    }    function login($username = "", $password = "") {        $sql  = "select * from member_t";        $sql .= " where username = '$username'";        $query = $this->db->query($sql);        if ($query->num_rows() > 0) {            $row = $query->row();            if ($row->status == -1)                return -1;      // Account not yet activated            if (strcmp($row->password, md5($password)) != 0)                return -2;      // Incorrect password            if ($row->status != 1)                return -3;      // Account disabled            // We reached here means authentication was successful, so write session data            $session_data = array (                    'id' => $row->member_id,                    'fb' => $row->fb_id,                    'fn' => $row->first_name,                    'ln' => $row->last_name,                    'bd' => $row->birth_dd . "/" . $row->birth_mm . "/" . $row->birth_yy . "/" . $row->birth_hh . "/" . $row->birth_mi . "/" . $row->birth_tz,                    //'pp' => $row->profile_pic,                    'bz' => $row->birth_tz,                    'cz' => $row->current_tz            );            $uid = $row->member_id;            $this->session->set_userdata($session_data);            $this->security_model->update_auth_token($uid);            $this->update_postcount_cookie ($uid);            // Remove any pending requests that have already expired...            $sql  = "delete from request_t";            $sql .= " where requestor_id = $uid";            $sql .= " and expiry_t <= now()";            $query = $this->db->query ($sql);            // Update pending requests count            $this->update_requestcount_cookie($uid);            // This is for updating transits data in case user is updating birth info            //$this->update_account_info ($uid);            return $uid;        }        else {            return -2;          // Wrong username        }    }    function update_postcount_cookie ($uid) {        $query = $this->db->query("select count(*) as cnt from post_t where member_id = $uid");        if ($query) {            $row = $query->row();            $session_data = array ('po' => $row->cnt);            $this->session->set_userdata($session_data);        }        $query = $this->db->query("select count(*) as cnt from prediction_t where member_id = $uid");        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $session_data = array ('pr' => $row->cnt);            }            else                $session_data = array ('pr' => 0);        }        $this->session->set_userdata($session_data);    }    function update_requestcount_cookie ($uid) {        // Get a fresh count of pending requests        $sql  = "select count(*) as cnt from request_t";        $sql .= " where requestee_id = $uid";        $sql .= " and status = 0";        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            if ($query->num_rows() > 0) {                $row = $query->row();                $session_data = array ('rc' => $row->cnt);            }            else                $session_data = array ('rc' => 0);            $this->session->set_userdata($session_data);        }    }    function update_sunsign ($uid) {        $sql  = " select birth_dd, birth_mm from member_t where member_id = $uid";        $query = $this->db->query($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $dd = $row->birth_dd;                $mm = $row->birth_mm;                $sunsign = $this->getsunsign ($dd, $mm);                $sql = "update member_t set sunsign = '" . $sunsign . "' where member_id = $uid";                $query = $this->db->query ($sql);            }        }    }    function update_moonsign ($uid) {        $sql  = " select birth_dd, birth_mm, birth_yy, birth_tz from member_t where member_id = $uid";        $query = $this->db->query($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $dd = $row->birth_dd;                $mm = $row->birth_mm;                $yy = $row->birth_yy;                $tz = $row->birth_tz;                $this->astro_model->astro_calc($dd, $mm, $yy, 0, 0, $tz, $dd, $mm, $yy,                        $moonsign, $nakshatra, $b_maha, $b_antar, $b_pratyantar, $p_maha, $p_antar, $p_pratyantar);                $sql = "update member_t set moonsign = '" . $moonsign . "' where member_id = $uid";                $query = $this->db->query ($sql);            }        }    }    function update_number ($uid, $what) {        $sql  = " select first_name, middle_name, last_name from member_t where member_id = $uid";        $query = $this->db->query($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $fname = $row->first_name;                $mname = $row->middle_name;                $lname = $row->last_name;                $number = $this->calc_number($fname.$mname.$lname, $what);                if ($what == 'destiny')                    $column = 'destiny_number';                if ($what == 'soulurge')                    $column = 'soulurge_number';                $sql = "update member_t set $column = $number where member_id = $uid";                $query = $this->db->query ($sql);            }        }    }    function update_lifepathnumber ($uid) {        $sql  = "select birth_yy, birth_mm, birth_dd from member_t where member_id = $uid";        $query = $this->db->query($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $dd = $row->birth_dd;                $mm = $row->birth_mm;                $yy = $row->birth_yy;                $number = $this->sumofdigits(intval($yy.$mm.$dd));                $sql = "update member_t set lifepath_number = $number where member_id = $uid";                $query = $this->db->query ($sql);            }        }    }    function getsunsign ($dd, $mm) {        if ($mm ==  3 && $dd >= 21)  $sunsign = 'Aries';        if ($mm ==  4 && $dd >= 20)  $sunsign = 'Taurus';        if ($mm ==  5 && $dd >= 21)  $sunsign = 'Gemini';        if ($mm ==  6 && $dd >= 21)  $sunsign = 'Cancer';        if ($mm ==  7 && $dd >= 23)  $sunsign = 'Leo';        if ($mm ==  8 && $dd >= 23)  $sunsign = 'Virgo';        if ($mm ==  9 && $dd >= 23)  $sunsign = 'Libra';        if ($mm == 10 && $dd >= 23)  $sunsign = 'Scorpio';        if ($mm == 11 && $dd >= 22)  $sunsign = 'Sagittarius';        if ($mm == 12 && $dd >= 22)  $sunsign = 'Capricorn';        if ($mm ==  1 && $dd >= 20)  $sunsign = 'Aquarius';        if ($mm ==  2 && $dd >= 19)  $sunsign = 'Pisces';        if ($mm ==  4 && $dd <= 19)  $sunsign = 'Aries';        if ($mm ==  5 && $dd <= 20)  $sunsign = 'Taurus';        if ($mm ==  6 && $dd <= 20)  $sunsign = 'Gemini';        if ($mm ==  7 && $dd <= 22)  $sunsign = 'Cancer';        if ($mm ==  8 && $dd <= 22)  $sunsign = 'Leo';        if ($mm ==  9 && $dd <= 22)  $sunsign = 'Virgo';        if ($mm == 10 && $dd <= 22)  $sunsign = 'Libra';        if ($mm == 11 && $dd <= 21)  $sunsign = 'Scorpio';        if ($mm == 12 && $dd <= 21)  $sunsign = 'Sagittarius';        if ($mm ==  1 && $dd <= 19)  $sunsign = 'Capricorn';        if ($mm ==  2 && $dd <= 18)  $sunsign = 'Aquarius';        if ($mm ==  3 && $dd <= 20)  $sunsign = 'Pisces';        return $sunsign;    }    function calc_number ($name, $what='destiny') {        $alphabets = array (                'A' => 1, 'J' => 1, 'S' => 1,                'B' => 2, 'K' => 2, 'T' => 2,                'C' => 3, 'L' => 3, 'U' => 3,                'D' => 4, 'M' => 4, 'V' => 4,                'E' => 5, 'N' => 5, 'W' => 5,                'F' => 6, 'O' => 6, 'X' => 6,                'G' => 7, 'P' => 7, 'Y' => 7,                'H' => 8, 'Q' => 8, 'Z' => 8,                'I' => 9, 'R' => 9        );        $number = 0;        for ($i = 0; $i < strlen($name); $i++) {            $char = ucfirst(substr($name, $i, 1));            if ($what == 'soulurge') {                if ($char == 'A' || $char == 'E' || $char == 'I' || $char == 'O' || $char == 'U')                    $number += isset($alphabets[$char]) ? $alphabets[$char] : 0;            }            else {                $number += isset($alphabets[$char]) ? $alphabets[$char] : 0;            }        }        $number = $this->sumofdigits ($number);        return $number;    }    function sumofdigits ($number) {        $len = strlen(strval($number));        $divisor = "1" . str_repeat("0", $len-1);        $divisor = intval($divisor);        $sum = 0;        for (; $divisor > 1; $divisor = $divisor % 10) {            $digit = intval($number / $divisor);            $sum += $digit;            $number = $number - ($digit * $divisor);        }        $sum += $number;        if ($sum >= 10) {            if ($sum != 11 && $sum != 22)                $sum = $this->sumofdigits($sum);        }        return $sum;    }    function getuserbyid ($id = 0) {        if ($id == 0)            return null;        $this->db->where('member_id', $id);        $query = $this->db->get('member_t');        if ($query) {            if ($query->num_rows() > 0)                $row = $query->row_array();            else                $row = null;            return $row;        }        else {            return null;        }    }    function get_user_chart ($id = 0) {        if ($id == 0)            return null;        $this->db->where('member_id', $id);        $query = $this->db->get('planet_t');                if ($query) {            if ($query->num_rows() > 0)                $row = $query->result_array();            else                $row = null;            return $row;        }        else {            return null;        }    }    function get_user_from_atok ($atok = "") {        if (!$atok)            return null;        $this->db->where ('auth_token', $atok);        $query = $this->db->get('member_t');        if ($query) {            if ($query->num_rows() > 0)                $row = $query->row_array();            else                $row = null;            return $row;        }        else {            return null;        }    }    function getuserbyname ($uname = "") {        if ($uname == "")            return null;        $this->db->where('username', $uname);        $query = $this->db->get('member_t');        if ($query) {            if ($query->num_rows() > 0)                $row = $query->row_array();            else                $row = null;            return $row;        }        else {            return null;        }    }    function logout($data = "") {        $session_data = array (                'at' => null,    // authenticity token                'id' => null,   // user id                'fb' => null,   // facebook id                'fn' => null,   // first name                'ln' => null,   // last name                'bd' => null,   // birthdate                'bz' => null,   // birth timezone                'cz' => null,   // current timezone                'po' => null,   // post count                'pr' => null,   // prediction count                'rc' => null    // request count        );        $this->session->set_userdata($session_data);        $this->session->unset_userdata($session_data);        $this->session->sess_destroy();        return true;    }    function api_logout($atok, $fbatok) {        $sql  = "delete from session_t where mv_atok = '$atok' and fb_atok = '$fbatok'";        $query = $this->db->query($sql);        if ($this->db->affected_rows() > 0)            return 0;        else            return -94;    }    function get_count ($uid=0, $what='followers') {        switch ($what) {            case 'followers':                $where = "where following_id = $uid and following_t.status = 1";                break;            case 'following':                $where = "where following_t.member_id = $uid and following_t.status = 1";                break;        }        $sql  = "select count(*) as cnt from following_t";        $sql .= " $where";        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function get_allusers_count($uid=0, $fname=0, $lname=0, $birth_dd=0, $birth_mm=0, $birth_yy=0,            $birth_hh=0, $birth_mi=0, $sunsign=0, $moonsign=0, $destiny=0, $lifepath=0, $soulurge=0,            $network=0) {        $where_clause = " where status = 1";        $fname_clause = ($fname) ? " and first_name = '" . $fname . "'" : "";        $lname_clause = ($lname) ? " and last_name = '" . $lname . "'" : "";        $sunsign_clause = ($sunsign) ? " and sunsign = '" . $sunsign . "'" : "";        $moonsign_clause = ($moonsign) ? " and sunsign = '" . $moonsign . "'" : "";        $birth_dd_clause = ($birth_dd) ? " and birth_dd = $birth_dd " : "";        $birth_mm_clause = ($birth_mm) ? " and birth_mm = $birth_mm " : "";        $birth_yy_clause = ($birth_yy) ? " and birth_yy = $birth_yy " : "";        $destiny_clause = $destiny ? " and destiny_number = $destiny" : "";        $lifepath_clause = $lifepath ? " and lifepath_number = $lifepath" : "";        $soulurge_clause = $soulurge ? " and soulurge_number = $soulurge" : "";        switch ($network) {            case 'followers':                $networkselect_clause = "select member_id from following_t";                $networkwhere_clause = " where following_id = $uid and status = 1";                break;            case 'following':                $networkselect_clause = "select following_id from following_t";                $networkwhere_clause = " where member_id = $uid and status = 1";                break;        }        $sql  = "select count(*) as cnt from member_t";        $sql .= " $where_clause";        $sql .= " $fname_clause";        $sql .= " $lname_clause";        $sql .= " $sunsign_clause";        $sql .= " $moonsign_clause";        $sql .= " $birth_dd_clause";        $sql .= " $birth_mm_clause";        $sql .= " $birth_yy_clause";        $sql .= " $destiny_clause";        $sql .= " $lifepath_clause";        $sql .= " $soulurge_clause";        $sql .= " and member_id <> $uid";        if ($uid && (!strcasecmp($network, 'followers') || !strcasecmp($network,'following'))) {            $sql .= " and member_id in (";            $sql .= " $networkselect_clause";            $sql .= " $networkwhere_clause";            $sql .= ")";        }        //log_message ('error', "UCNT -- $sql");        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function get_allusers ($offset=0, $uid=0, $fname=0, $lname=0, $birth_dd=0, $birth_mm=0, $birth_yy=0,            $birth_hh=0, $birth_mi=0, $sunsign=0, $moonsign=0, $destiny=0, $lifepath=0, $soulurge=0,            $network=0) {        //network: 1-followers, 2-following        $where_clause = " where status = 1";        $fname_clause = ($fname) ? " and first_name = '" . $fname . "'" : "";        $lname_clause = ($lname) ? " and last_name = '" . $lname . "'" : "";        $sunsign_clause = ($sunsign) ? " and sunsign = '" . $sunsign . "'" : "";        $moonsign_clause = ($moonsign) ? " and sunsign = '" . $moonsign . "'" : "";        $birth_dd_clause = ($birth_dd) ? " and birth_dd = $birth_dd " : "";        $birth_mm_clause = ($birth_mm) ? " and birth_mm = $birth_mm " : "";        $birth_yy_clause = ($birth_yy) ? " and birth_yy = $birth_yy " : "";        $destiny_clause = $destiny ? " and destiny_number = $destiny" : "";        $lifepath_clause = $lifepath ? " and lifepath_number = $lifepath" : "";        $soulurge_clause = $soulurge ? " and soulurge_number = $soulurge" : "";        switch ($network) {            case 'followers':                $networkselect_clause = "select member_id from following_t";                $networkwhere_clause = " where following_id = $uid and status = 1";                break;            case 'following':                $networkselect_clause = "select following_id from following_t";                $networkwhere_clause = " where member_id = $uid and status = 1";                break;        }        $sql  = "select member_id, username, fb_id, first_name, last_name, gender, sunsign,";        $sql .= " moonsign, birth_city, profile_pic, profile_tag, current_city";        $sql .= " from member_t";        $sql .= " $where_clause";        $sql .= " $fname_clause";        $sql .= " $lname_clause";        $sql .= " $sunsign_clause";        $sql .= " $moonsign_clause";        $sql .= " $birth_dd_clause";        $sql .= " $birth_mm_clause";        $sql .= " $birth_yy_clause";        $sql .= " $destiny_clause";        $sql .= " $lifepath_clause";        $sql .= " $soulurge_clause";        $sql .= " and member_id <> $uid";        if ($uid && (!strcasecmp($network, 'followers') || !strcasecmp($network,'following'))) {            $sql .= " and member_id in (";            $sql .= " $networkselect_clause";            $sql .= " $networkwhere_clause";            $sql .= ")";        }        $sql .= " order by first_name";        $sql .= " limit 5 offset $offset";        //log_message('error', "GET_ALLUSERS -- " .$sql);        $query = $this->db->query ($sql);        if ($query)            return $query->result();        else            return null;    }    function is_following ($loggedin_user, $uid) {        $sql  = "select count(*) as cnt from following_t";        $sql .= " where member_id = $loggedin_user";        $sql .= " and following_id = $uid";        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function is_followed ($loggedin_user, $uid) {        $sql  = "select count(*) as cnt from following_t";        $sql .= " where member_id = $uid";        $sql .= " and following_id = $loggedin_user";        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function follow ($owner_id=0, $other_id=0, $action=0) {        global $NOTIFICATIONS;        switch ($action) {            case 0:                $sql  = "delete from following_t";                $sql .= " where following_t.member_id = $owner_id and following_id = $other_id";                break;            case 1:                $sql  = "insert ignore into following_t (member_id, following_id, status)";                $sql .= " values ($owner_id, $other_id, 1)";                break;        }        $query = $this->db->query ($sql);        if ($query) {            if ($this->db->affected_rows() > 0) {                if ($action == 1) {                    $user = $this->getuserbyid($owner_id);                    $ext_params = array (                            'uurl' => 'http://mevine.com/post/showuser/' . $user['fb_id'] . '/'. $user['member_id']                    );                    $this->notification_model->proxy($user, $other_id, $NOTIFICATIONS['FOLLOWS_ME'], $ext_params);                }                return 1;            }            else {                return 0;            }        }        else {            return 0;        }    }    function merge_invitations_into_follow($uid, $fb_id) {        $sql  = "insert ignore into following_t (member_id, following_id, status)";        $sql .= " select from_mevine_id, $uid, 1 from invitation_t";        $sql .= " where to_fb_id = $fb_id";        $query = $this->db->query($sql);        $sql  = "delete from invitation_t where to_fb_id = $fb_id";        $query = $this->db->query($sql);    }    function merge_email_invitations_into_follow($uid, $email) {        $sql  = "insert ignore into following_t (member_id, following_id, status)";        $sql .= " SELECT from_mevine_id, member_id, 1";        $sql .= " FROM invitation_email_queue_t, member_t";        $sql .= " WHERE member_t.email = invitation_email_queue_t.to_email";        $sql .= " and invitation_email_queue_t.email = $email";        $sql .= " AND member_id > 41";        $query = $this->db->query($sql);        $sql  = "delete from invitation_email_queue_t where to_email = '$email'";        $query = $this->db->query($sql);    }    function get_random_network_users($uid=0, $type='followers', $cnt=36) {        switch ($type) {            case 'followers':                $select = "select member_id from following_t";                $where = " where following_id = $uid and following_t.status = 1";                break;            case 'following':                $select = "select following_id from following_t";                $where = "where member_id = $uid and following_t.status = 1";                break;        }        $sql  = "select member_t.member_id as member_id, username, fb_id, first_name, last_name, gender, sunsign,";        $sql .= " moonsign, birth_city, profile_pic, profile_tag, member_t.current_city as current_city";        $sql .= " from member_t";        $sql .= " where member_id in (";        $sql .= " $select";        $sql .= " $where";        $sql .= ")";        $sql .= " and member_t.status = 1";        $sql .= " order by rand()";        $sql .= " limit $cnt";        //log_message('error', "GET_RANDOM_NETWORK_USERS -- " .$sql);        $query = $this->db->query ($sql);        if ($query) {            $users = array();            $i = 0;            if ($query->num_rows() > 0) {                $result = $query->result_array();                foreach ($result as $row) {                    $users[$i] = $row;                    $i++;                }            }            return $users;        }        else {            return null;        }    }    function is_logged_in() {/*        //log_message ('error', 'is_logged_in');        global $FB_CONFIG;        // Check mevine login status        $uid = $this->session->userdata('id');        $uid = $uid ? $uid : 0;        // Check facebook login status        $fbatok = $this->facebook->getAccessToken();        // Facebook library returns appid|secret if there is no access token        if (!strcasecmp($fbatok, $FB_CONFIG['appId'].'|'.$FB_CONFIG['secret']))            $fb = 0;        else            $fb = 1;        //$session = $this->facebook->getSession();        //$fb = empty($session['access_token']) ? 0 : 1;        // Must be logged in at both places        $ret = ($uid && $fb) ? 1 : 0;        if ($ret == 0) {            $this->logout();        }        return $ret; * */        return $this->is_logged_in_mevine();    }    function is_logged_in_mevine() {        // Check mevine login status        $uid = $this->session->userdata('id');        $uid = $uid ? $uid : 0;        if ($uid == 0)            $this->logout();        return $uid;    }    /*  Function    :   request     *  Parameters  :   $what       - 1:Post, 2:Prediction, 3:Ask Prediction, 4:Respond to prediction request     *                  $requestor  - UID of requestor     *                  $network    - 0:Request can be sent even outside of the requestor's network     *                                1:Request should be sent only within the requestor's network     *                  $count      - The maximum members to whom this request can be sent     *                                  0:All (e.g all followed members)     *                  $attribute  - Attribute for identifying the requestee, can be one of the following     *                                  0:UID,1:Sunsign, 2:first_name, 3:last_name,     *                                  4:birth_yy, 5:birth_date, 6:just like you     *     *                  $value      - Value corresponding to the above attribute     *     * Returns      :   Formatted response string (text to be displayed along with success/fail icon)    */    function request ($what=0, $uid=0, $first_name=0, $network=0, $count=0, $attribute=0, $value=0) {        switch ($attribute) {            case 0:                $where = " where member_id = $value";                break;            case 1:                $where = " where sunsign = '$value'";                break;            case 2:                $where = " where first_name = '$value'";                break;            case 3:                $where = " where last_name = '$value'";                break;            case 4:                $where = " where birth_yy = $value";                break;            case 5:                $where = " where birth_date = '$value'";                break;        }        $limit = $count ? "LIMIT $count" : "";        if ($network == 0) {            $sql  = "select member_id from member_t";            $sql .= " $where";            $sql .= " and member_t.status = 1";            $sql .= " order by rand()";            $sql .= " $limit";        }        else {            if ($count > 0) {                $sql  = "select member_id from member_t";                $sql .= " $where";                $sql .= " and member_t.status = 1";                $sql .= " and member_id in (";                $sql .= " select following_id from following_t";                $sql .= " where member_id = $uid and following_t.status = 1";                $sql .= ")";                $sql .= " order by rand()";                $sql .= " $limit";            }            else {                $sql  = "select following_id as member_id from following_t";                $sql .= " where member_id = $uid and following_t.status = 1";            }        }        $query = $this->db->query ($sql);        if (!$query) {            return "Your request could not be sent";        }        if ($query->num_rows() > 0) {            $result = $query->result_array();            $cnt = 0;            if ($what == 1) {                $expiry_t = date("Y-m-d", time()+(86400 * 7));  // 1 week expiry                $message = 'has requested you for a post.';                $url = "<a href=/post/post_message>Respond now!</a>";            }            if ($what == 2) {                $expiry_t = date("Y-m-d", time()+(86400) * 7);  // 1 week expiry                $message = 'has requested you for a prediction.';                $url = "<a href=/prediction/post_message>Respond now!</a>";            }            if ($what == 3) {                $expiry_t = date("Y-m-d", time()+(86400) * 7);  // 1 week expiry                $message = 'wants to let you know that you can ask for a prediction.';                $url = "<a href=/prediction/post_question>Respond now!</a>";            }            $sql  = "insert ignore into request_t (request_type, requestor_id, requestee_id, message, expiry_t)";            $sql .= " values";            $ret = "";            foreach ($result as $row) {                // ignore self                if ($row['member_id'] == $uid)                    continue;                $comma = ($cnt > 0) ? "," : "";                $sql .= " $comma ($what,$uid," . $row['member_id']. ",'$first_name $message $url', '$expiry_t')";                $cnt++;            }            $query = $this->db->query ($sql);            if (!$query) {                return "Your request could not be sent";            }            $affected_rows = $this->db->affected_rows();            if ($affected_rows > 0) {                if ($cnt == 1)                    $ret = "Your request was sent";                else                    $ret = "Your request was sent to $affected_rows members";            }            else                $ret = "Your request could not be sent, may be due to earlier pending request";        }        else {            $ret = "Your request could not be sent, may be due to earlier pending request";        }        return $ret;    }    function get_requestcount($uid=0, $what=0) {        $sql  = "select count(*) as cnt";        $sql .= " from request_t";        $sql .= " where requestee_id = $uid";        $sql .= " and status = 0";        //log_message ('error', "CNT -- $sql");        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function get_requests($offset=0, $uid=0, $what=0) {        $sql  = "select request_id, request_type, requestor_id, fb_id, message, request_t.timestamp_t as created_t,";        $sql .= " username, first_name, last_name, profile_pic, sunsign";        $sql .= " from request_t, member_t";        $sql .= " where request_t.requestee_id = $uid";        $sql .= " and request_t.requestor_id = member_t.member_id";        $sql .= " and request_t.status = 0";        $sql .= " order by request_t.timestamp_t desc";        $sql .= " limit 5 offset $offset";        //log_message ('error', "MSG -- $sql");        $query = $this->db->query ($sql);        if ($query) {            return $query->result();        }        else {            return null;        }    }    function delete_request ($request_id=0) {        // Only the logged in user can delete        $uid = $this->session->userdata('id');        $sql = "delete from request_t where request_id = $request_id and requestee_id = $uid";        $query = $this->db->query ($sql);        if ($query) {            if ($this->db->affected_rows() > 0)                return null;            else                return "Cannot delete this request...";        }        else {            return "Cannot delete this request...";        }    }    function update_password ($uid, $password) {        $sql  = "update member_t";        $sql .= " set clear_password = '$password', password = md5('" . $password ."')";        $sql .= " where member_id = $uid";        $query = $this->db->query($sql);    }    function update_account_info ($user, $uid, $bhh, $bmi, $btz, $ctz, $password, $birth_long_deg,            $birth_long_dir, $birth_long_min, $birth_lat_deg, $birth_lat_dir, $birth_lat_min, $bcity) {        if ($password) {            $password_str = ", clear_password = '$password', password = md5('" . $password ."')";        }        else            $password_str = "";        $this->astro_model->astro_calc($user['birth_dd'], $user['birth_mm'], $user['birth_yy'],                $bhh, $bmi, $btz,                $user['birth_dd'], $user['birth_mm'], $user['birth_yy'],                $moonsign, $nakshatra, $b_maha, $b_antar, $b_pratyantar, $p_maha, $p_antar, $p_pratyantar);        $this->db->trans_start();        $sql  = "update member_t";        $sql .= " set birth_hh = $bhh, birth_mi = $bmi, birth_tz = $btz, current_tz = $ctz";        $sql .= ", birth_long_deg = $birth_long_deg, birth_long_dir = '$birth_long_dir', birth_long_min = $birth_long_min";        $sql .= ", birth_lat_deg = $birth_lat_deg, birth_lat_dir = '$birth_lat_dir', birth_lat_min = $birth_lat_min";        $sql .= ", moonsign = '$moonsign', birth_mahadasha = '$b_maha', birth_antardasha = '$b_antar'";        $sql .= ", birth_pratyantardasha = '$b_pratyantar', nakshatra = '$nakshatra', birth_city = '$bcity' ";        $sql .= $password_str;        $sql .= " where member_id = $uid";        $query = $this->db->query($sql);        if ($this->db->affected_rows() > 0) {            $user = $this->getuserbyid ($uid);            $uid = $user['member_id'];            $bdd = $user['birth_dd'];            $bmm = $user['birth_mm'];            $byy = $user['birth_yy'];            $bhh = $user['birth_hh'];            $bmi = $user['birth_mi'];            $btz = $user['birth_tz'];            // Update post_transits_t            $sql = "select post_id, post_dd, post_mm, post_yy from post_t where member_id = $uid";            $query = $this->db->query ($sql);            if ($query->num_rows() > 0) {                $result = $query->result_array();                foreach ($result as $row) {                    $post_id = $row['post_id'];                    $pdd = $row['post_dd'];                    $pmm = $row['post_mm'];                    $pyy = $row['post_yy'];                    $this->post_model->insert_transits (                            $post_id, $bdd, $bmm, $byy, $bhh, $bmi, $btz, $pdd, $pmm, $pyy, 1);                }            }            // Update prediction_transits_t            $sql = "select prediction_id, prediction_dd, prediction_mm, prediction_yy from prediction_t where member_id = $uid";            $query = $this->db->query ($sql);            if ($query->num_rows() > 0) {                $result = $query->result_array();                foreach ($result as $row) {                    $prediction_id = $row['prediction_id'];                    $pdd = $row['prediction_dd'];                    $pmm = $row['prediction_mm'];                    $pyy = $row['prediction_yy'];                    $this->prediction_model->insert_transits (                            $prediction_id, $bdd, $bmm, $byy, $bhh, $bmi, $btz, $pdd, $pmm, $pyy, 1);                }            }            // Calculate birth chart            $planets = array();            $houses = array();            $lords = array();            $chart = array();            $div = 1;            $this->parashara_model->natal_calc($bdd,$bmm,$byy,$bhh,$bmi,0,$btz,$birth_long_deg,$birth_long_dir,$birth_long_min,                    $birth_lat_deg,$birth_lat_dir,$birth_lat_min, $planets);            $this->parashara_model->divisional_chart($planets, $chart, $houses, $lords, $div);            // Remove all earlier planetary calculations & divisional charts            $query = $this->db->query ("delete from planet_t where member_id = $uid");            $query = $this->db->query ("delete from chart_t where member_id = $uid");            // Now parse and insert the planets and divisional charts            error_reporting(E_ERROR|E_WARNING); // To bypass the warning Undefined index 'shadbala'            // Insert basic planet information            foreach ($planets as $p) {                $sql  = "insert into planet_t (member_id, planet_id, longitude, degree, is_retrograde, nakshatra, rasi_where_resident";                if ($p['id'] <= PLANET_SATURN) {                    $sql .= ", shadbala, sthanabala, uchcha, saptavargaja, ojha, kendradi, drekkana";                }                $sql .= ") values (";                $sql .= $uid . "," . $p['id'] . "," . $p['longitude'] . "," . $p['degree'] . "," . $p['retrograde'] . ",";                $sql .= $p['nakshatra'] . "," . $p['rasi_where_resident'];                if ($p['id'] <= PLANET_SATURN) {                    $sql .= "," . "0,0" . ",";                    $sql .= $p['shadbala']['sthana']['uchcha'] . "," . $p['shadbala']['sthana']['saptavargaja'] . ",";                    $sql .= $p['shadbala']['sthana']['ojha'] . "," . $p['shadbala']['sthana']['kendradi'] . ",";                    $sql .= $p['shadbala']['sthana']['drekkana'];                }                $sql .= ")";                $this->db->query ($sql);            }            // Insert divisional charts (1, 2, 3, 7, 9, 12, 30)            foreach ($chart as $d=>$ch) {                foreach ($ch as $c) {                    $sql  = "insert into chart_t (member_id, div_id, planet_id, longitude, nakshatra, degree, func_nature";                    $sql .= ", rasi_where_resident, bhava_where_resident, is_mmp, is_mbp, is_malefic";                    $sql .= ", aspect_by_su, aspect_by_mo, aspect_by_ma, aspect_by_me, aspect_by_ju, aspect_by_ve, aspect_by_sa, aspect_by_ra, aspect_by_ke";                    if ($c['id'] <= PLANET_SATURN) {                        $sql .= ", is_exalted, is_debilitated, is_moolatrikona, is_ownhouse, is_friendhouse, is_hostilehouse, is_neutralhouse";                    }                    $sql .= ") values (";                    $sql .= $uid . "," . $d . "," . $c['id'] . "," . $c['longitude'] . "," . $c['nakshatra'];                    $sql .= "," . $c['degree'] . "," . "'" . $c['func_nature'] . "'";                    $sql .= "," . $c['rasi_where_resident'] . "," . $c['bhava_where_resident'] . "," . $c['mmp'] . "," . $c['mbp'];                    if ($c['id'] != PLANET_ASCENDANT)                        $sql .= "," . $c['malefic'];                    else                        $sql .= ",0";                    $sql .= "," . $c['aspected_by_planet'][PLANET_SUN];                    $sql .= "," . $c['aspected_by_planet'][PLANET_MOON];                    $sql .= "," . $c['aspected_by_planet'][PLANET_MARS];                    $sql .= "," . $c['aspected_by_planet'][PLANET_MERCURY];                    $sql .= "," . $c['aspected_by_planet'][PLANET_JUPITER];                    $sql .= "," . $c['aspected_by_planet'][PLANET_VENUS];                    $sql .= "," . $c['aspected_by_planet'][PLANET_SATURN];                    if ($c['id'] <= PLANET_SATURN) {                        $sql .= "," . $c['aspected_by_planet'][PLANET_RAHU];                        $sql .= "," . $c['aspected_by_planet'][PLANET_KETU];                    }                    else {                        $sql .= ",0,0";                    }                    if ($c['id'] <= PLANET_SATURN) {                        $sql .= ",";                        $sql .= $c['exalted'] . "," . $c['debilitated'] . "," . $c['moolatrikona'] . "," . $c['ownhouse'];                        $sql .= "," . $c['friendhouse'] . "," . $c['hostilehouse'] . "," . $c['neutralhouse'];                    }                    $sql .= ")";                    $this->db->query ($sql);                }            }            // Remove user traits            $this->db->query ("delete from user_planet_sign_traits_t where member_id = $uid");            $sql = "SELECT planet_id, rasi_where_resident FROM chart_t WHERE member_id = $uid AND div_id = 1 and planet_id <= 6 order by planet_id";            $query = $this->db->query ($sql);            if ($query->num_rows() > 0) {                $result = $query->result_array();                $sql = " insert into user_planet_sign_traits_t (member_id, trait_id) ";                $sql .= " SELECT $uid, tt.trait_id as trait_id FROM trait_t tt, planet_sign_traits_t pstt";                $sql .= " WHERE tt.trait_id = pstt.trait_id";                $sql .= " AND (";                foreach ($result as $row) {                    $sql .= " (planet_id = " . $row['planet_id'] . " AND sign_id = " . $row['rasi_where_resident'] . ")";                    if ($row['planet_id'] < PLANET_SATURN) {                        $sql .= " OR";                    }                }                $sql .= ") group by trait_id";                $query = $this->db->query ($sql);            }        }        $this->db->trans_complete();    }    function get_planet_sign_traits ($uid=0) {        // Get mapping of planets and signs for the user        $sql  = "SELECT tt.trait_id as trait_id, trait_name, agree FROM trait_t tt, user_planet_sign_traits_t upst";        $sql .= " WHERE upst.member_id = $uid";        $sql .= " AND tt.trait_id = upst.trait_id";        $query = $this->db->query ($sql);        if ($query)            return $query->result();        else            return null;    }    function vote_planet_sign_trait ($uid, $trait_id, $agree) {        $sql = "update user_planet_sign_traits_t set agree = $agree where member_id = $uid and trait_id = $trait_id";        $query = $this->db->query ($sql);    }    function get_cookie_sunsign () {        $this->get_birthdmy_hhmibz($dd, $mm, $yy, $hh, $mi, $bz);        $sunsign = $this->getsunsign($dd, $mm);        return $sunsign;    }    function jqSearchUsers ($q) {        $sql  = "SELECT concat('/', fb_id, '/', member_id) as path, TRIM(CONCAT(first_name, ' ', last_name)) as name, profile_pic";        $sql .= " FROM member_t";        $sql .= " WHERE first_name like '$q%'";        $sql .= " or last_name like '$q%'";        $sql .= " order by rand(), first_name";        $sql .= " limit 7";        $query = $this->db->query ($sql);        $x = "";        if ($query->num_rows() > 0) {            $x = json_encode($query->result_array());        }        else            $x = json_encode (array('name' => '', 'descr' => 'No matching user found...'));        return $x;    }    function get_relationship($uid, $friend_id) {        // See if already a friend        $sql  = "select count(*) as cnt from member_t";        $sql .= " where fb_id = $friend_id";        $query = $this->db->query ($sql);        $row = $query->row();        if ($row->cnt != 0) {            return 1;        }        else {            // See if current user has already invited the facebook user & the invitation is still active            $sql  = "select count(*) as cnt from invitation_t";            $sql .= " where from_mevine_id = $uid and to_fb_id = $friend_id";            $sql .= " and status = 1";            $query = $this->db->query ($sql);            $row = $query->row();            if ($row->cnt == 0)                return 0;            else                return 2;        }    }    function send_fbinvite ($uid, $to_fb_id) {        $sql  = "insert ignore into invitation_t (from_mevine_id, to_fb_id, intro_msg, status)";        $sql .= " values ($uid, $to_fb_id, 'You are invited to join mevine!', 1)";        $query = $this->db->query ($sql);        if ($this->db->affected_rows() > 0)            return 1;        else            return 0;    }    function queue_email_invitations($uid, $fb_id, $name, $emails) {        $emailarray = explode(',', $emails);        $cnt = 0;        $intro_msg = "$name has invited you to join mevine.";        $sql  = "insert  into invitation_email_queue_t (from_name, from_mevine_id, from_fb_id, to_email, intro_msg, status)";        $sql .= " values";        foreach ($emailarray as $email) {            $comma = ($cnt > 0) ? "," : "";            $sql .= " $comma ('$name', $uid, $fb_id, '$email', '$intro_msg', 0)";            $cnt++;        }        $query = $this->db->query ($sql);        $this->dequeue_email_invitations();    }    function dequeue_email_invitations() {        $sql  = "select * from invitation_email_queue_t where status = 0";        $sql .= " and to_email not in (SELECT email FROM member_t)";        $query = $this->db->query ($sql);        if (!$query)            retrn;        if ($query->num_rows() > 0) {            $result = $query->result_array();            foreach ($result as $row) {                $from_mevine_id = $row['from_mevine_id'];                $from_fb_id     = $row['from_fb_id'];                $from_name      = $row['from_name'];                $to_email       = $row['to_email'];                $intro_msg      = $row['intro_msg'];                $this->notification_model->invitation_to_join($from_mevine_id, $from_fb_id, $from_name, $to_email, $intro_msg);            }        }        // Update status as sent        $sql  = "update invitation_email_queue_t";        $sql .= " set status = 1";        $sql .= " where status = 0";        $query = $this->db->query($sql);    }}?>