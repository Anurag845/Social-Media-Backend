<?phpConst PLANET_SUN = 0;Const PLANET_MOON = 1;Const PLANET_MERCURY = 2;Const PLANET_VENUS = 3;Const PLANET_MARS = 4;Const PLANET_JUPITER = 5;Const PLANET_SATURN = 6;Const PLANET_RAHU = 7;Const PLANET_KETU = 8;Const PLANET_MEANNODE = 7;Const PLANET_TRUENODE = 8;Const PLANET_ASCENDANT = 21;Const SIGN_AR = 1;Const SIGN_TA = 2;Const SIGN_GE = 3;Const SIGN_CN = 4;Const SIGN_LE = 5;Const SIGN_VI = 6;Const SIGN_LI = 7;Const SIGN_SC = 8;Const SIGN_SG = 9;Const SIGN_CP = 10;Const SIGN_AQ = 11;Const SIGN_PI = 12;Const DEBUG = FALSE;class Parashara_model extends Model {    public $v_planets;    public $sign_lords;    public $PLANET_CONFIG;    public $planet_names;    public $sign_by_name;    function Parashara_model() {        parent::Model();        $this->v_planets = new stdClass();        $this->v_planets = array();        $this->PLANET_CONFIG = array(                PLANET_SUN      => array('ER' => SIGN_AR, 'ED' => 10,   'DR' => SIGN_LI, 'DD' => 10, 'MT' => SIGN_LE),                PLANET_MOON     => array('ER' => SIGN_TA, 'ED' => 3,    'DR' => SIGN_SC, 'DD' => 3, 'MT' => SIGN_CN),                PLANET_MARS     => array('ER' => SIGN_CP, 'ED' => 28,   'DR' => SIGN_CN, 'DD' => 28, 'MT' => SIGN_AR),                PLANET_MERCURY  => array('ER' => SIGN_VI, 'ED' => 15,   'DR' => SIGN_PI, 'DD' => 15, 'MT' => SIGN_VI),                PLANET_JUPITER  => array('ER' => SIGN_CN, 'ED' => 5,    'DR' => SIGN_CP, 'DD' => 5, 'MT' => SIGN_SG),                PLANET_VENUS    => array('ER' => SIGN_PI, 'ED' => 27,   'DR' => SIGN_VI, 'DD' => 27, 'MT' => SIGN_LI),                PLANET_SATURN   => array('ER' => SIGN_LI, 'ED' => 20,   'DR' => SIGN_AR, 'DD' => 20, 'MT' => SIGN_AQ)        );        $this->planet_names = array (0=>'Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Rahu', 'Ketu', 21=>'Lagna');        $this->sign_by_id = array('Aries'=>1, 'Taurus'=>2, 'Gemini'=>3, 'Cancer'=>4, 'Leo'=>5, 'Virgo'=>6,                                'Libra'=>7, 'Scorpio'=>8, 'Sagittarius'=>9, 'Capricorn'=>10, 'Aquarius'=>11, 'Pisces'=>12);    }    function calc_ayanamsa($dd, $mm, $yy) {        $sql = "SELECT ayndate, col1, col2 FROM ayanamsa_t            WHERE ayndate <= DATE('$yy-$mm-$dd')            ORDER BY ayndate DESC            LIMIT 1";        $query = $this->db->query ($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                $col1 = $row->col1;                $col2 = $row->col2;            }        }        $ayanamsa = round($col1 + ($col2 / 60), 4);        return $ayanamsa;    }    function natal_calc($dd, $mm, $yy, $hh, $mi, $ss, $tz, $lon_deg, $lon_ew, $lon_min, $lat_deg, $lat_ns, $lat_min, &$planets) {        global $SWEPH_PATH;        $swephsrc = $SWEPH_PATH;        $sweph = $SWEPH_PATH;        //$planets = array();        $charts = array();        $houses = array();        $lords = array();        $planet_names = array (0=>'Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Rahu', 'Ketu', 21=>'Lagna');        $this->sign_lords = array (                SIGN_AR => PLANET_MARS, SIGN_TA => PLANET_VENUS, SIGN_GE => PLANET_MERCURY,                SIGN_CN => PLANET_MOON, SIGN_LE => PLANET_SUN, SIGN_VI => PLANET_MERCURY,                SIGN_LI => PLANET_VENUS, SIGN_SC => PLANET_MARS, SIGN_SG => PLANET_JUPITER,                SIGN_CP => PLANET_SATURN, SIGN_AQ => PLANET_SATURN, SIGN_PI => PLANET_JUPITER);        // 1. Convert date/time to universal time        if ($tz >= 0) {            $whole = floor($tz);            $fraction = $tz - floor($tz);        }        else {            $whole = ceil($tz);            $fraction = $tz - ceil($tz);        }        $hh = $hh - $whole;        $mi = $mi - ($fraction * 60);        $utdate = strftime("%d.%m.%Y", mktime($hh, $mi, $ss, $mm, $dd, $yy));        $uttime = strftime("%H:%M:%S", mktime($hh, $mi, $ss, $mm, $dd, $yy));        if (DEBUG) {            echo "<strong>Step 01</strong><br>";            echo "----------<br>";            echo $utdate . " " . $uttime . "<br>";        }        // 2. Convert geopos from raw lat/long        $n = 1;        $s = -1;        $e = 1;        $w = -1;        $ew = (strcmp($lon_ew, 'E') == 0) ? 1 : -1;        $ns = (strcmp($lat_ns, 'N') == 0) ? 1 : -1;        $longitude = round($ew * ($lon_deg + ($lon_min / 60)), 2);        $latitude = round($ns * ($lat_deg + ($lat_min / 60)), 2);        if (DEBUG) {            echo "<br>&nbsp;<br>";            echo "<strong>Step 02</strong><br>";            echo "----------<br>";            echo "Longitude: $longitude" . "<br>";            echo "Latitude: $latitude" . "<br>";        }        // 3. Calculate ayanamsa        $ayanamsa = $this->calc_ayanamsa($dd, $mm, $yy);        if (DEBUG) {            echo "<br>&nbsp;<br>";            echo "<strong>Step 03</strong><br>";            echo "----------<br>";            echo "Ayanamsa = $ayanamsa";        }        // 4. Invoke swetest        if (DEBUG) {            echo "<br>&nbsp;<br>";            echo "<strong>Step 04</strong><br>";            echo "----------<br>";        }        $swe_cmd = "$SWEPH_PATH\swetest -edir$sweph -b$utdate -ut$uttime -geopos$longitude,$latitude,0 -fPsl -house -g, -head -p0123456mt";        session_write_close();        exec ($swe_cmd, $out);        // 5. Calculate longitude & speed (columns E, F of parashar21 excel)        // Each line of output data from swetest is exploded into array $row, giving these elements:        // 0 = longitude        // 1 = speed        // planets are index 0 - index ($last_planet)        foreach ($out as $key => $line) {            $row = explode(',',$line);            $longitude1[$key] = $row[1];            if (isset($row[2])) {                $speed[$key] = $row[2];            }            else {                $speed[$key] = $row[1];            }        };        // 6. Calculate column G        $col_g = array(                PLANET_SUN => round($speed[PLANET_SUN] - $ayanamsa, 2),                PLANET_MOON => round($speed[PLANET_MOON] - $ayanamsa, 2),                PLANET_MERCURY => round($speed[PLANET_MERCURY] - $ayanamsa, 2),                PLANET_VENUS => round($speed[PLANET_VENUS] - $ayanamsa, 2),                PLANET_MARS => round($speed[PLANET_MARS] - $ayanamsa, 2),                PLANET_JUPITER => round($speed[PLANET_JUPITER] - $ayanamsa, 2),                PLANET_SATURN => round($speed[PLANET_SATURN] - $ayanamsa, 2),                PLANET_MEANNODE => round($speed[PLANET_MEANNODE] - $ayanamsa, 2),                PLANET_TRUENODE => round($speed[PLANET_TRUENODE] - $ayanamsa, 2),                PLANET_ASCENDANT => round($speed[PLANET_ASCENDANT] - $ayanamsa, 2),        );        if (DEBUG) {            echo "<br>&nbsp;<br>";            echo "<strong>Step 06</strong><br>";            echo "----------<br>";            print_r ($col_g);        }        // 7, 8, 9. Calculate column H & natal longitudes (row 40)        foreach ($col_g as $key=>$value) {            $planets[$key]['id'] = $key;            $planets[$key]['name'] = $planet_names[$key];            if ($col_g[$key] < 0) {                $planets[$key]['longitude'] = $col_g[$key] + 360;            }            else if ($col_g[$key] > 360) {                $planets[$key]['longitude'] = 360 - $col_g[$key];            }            else {                $planets[$key]['longitude'] = $col_g[$key];            }            $planets[$key]['degree'] = fmod($planets[$key]['longitude'], 30);            if ($key >= PLANET_MERCURY && $key <= PLANET_SATURN && $key != PLANET_ASCENDANT) {                if ($longitude1[$key] < 0)                    $planets[$key]['retrograde'] = 1;                else                    $planets[$key]['retrograde'] = 0;            }            else {                $planets[$key]['retrograde'] = 0;            }        }        $planets[PLANET_RAHU]['longitude'] = $planets[PLANET_TRUENODE]['longitude'];        // Calculate ketu, always opposite rahu        if ($planets[PLANET_RAHU]['longitude']+180 > 360)            $planets[PLANET_KETU]['longitude'] = $planets[PLANET_RAHU]['longitude']-180;        else            $planets[PLANET_KETU]['longitude'] = $planets[PLANET_RAHU]['longitude']+180;        // 10. Calculate nakshatra number (for planets)        $naks = array(                1=>array('name'=>"Ashwini",'maxlong'=>0,'minlong'=>0),                array('name'=>"Bharani",'maxlong'=>0,'minlong'=>0),                array('name'=>"Krittika",'maxlong'=>0,'minlong'=>0),                array('name'=>"Rohini",'maxlong'=>0,'minlong'=>0),                array('name'=>"Mrigashira",'maxlong'=>0,'minlong'=>0),                array('name'=>"Ardra",'maxlong'=>0,'minlong'=>0),                array('name'=>"Punarvasu",'maxlong'=>0,'minlong'=>0),                array('name'=>"Pushya",'maxlong'=>0,'minlong'=>0),                array('name'=>"Ashlesha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Magha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Purva Phalguni",'maxlong'=>0,'minlong'=>0),                array('name'=>"Uttara Phalguni",'maxlong'=>0,'minlong'=>0),                array('name'=>"Hasta",'maxlong'=>0,'minlong'=>0),                array('name'=>"Chitra",'maxlong'=>0,'minlong'=>0),                array('name'=>"Swati",'maxlong'=>0,'minlong'=>0),                array('name'=>"Vishakha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Anuradha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Jyeshtha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Mula",'maxlong'=>0,'minlong'=>0),                array('name'=>"Purva Shadya",'maxlong'=>0,'minlong'=>0),                array('name'=>"Uttara Shadya",'maxlong'=>0,'minlong'=>0),                array('name'=>"Shravana",'maxlong'=>0,'minlong'=>0),                array('name'=>"Dhanishtha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Shatbisha",'maxlong'=>0,'minlong'=>0),                array('name'=>"Purva Bhadrapada",'maxlong'=>0,'minlong'=>0),                array('name'=>"Uttara Bhadrapada",'maxlong'=>0,'minlong'=>0),                array('name'=>"Revati",'maxlong'=>0,'minlong'=>0)        );        foreach ($naks as $key=>$value) {            $naks[$key]['maxlong'] =  $key * (360/27);            $naks[$key]['minlong'] =  $key-1 * (360/27);        }        foreach ($planets as $i=>$value) {            foreach ($naks as $j=>$value1) {                if (($value['longitude'] >= $value1['minlong']) && ($value['longitude'] < $value1['maxlong'])) {                    $planets[$i]['nakshatra'] = $j;                    break;                }            }        }        // PAC CALCULATIONS -- LOCATIONS        // 10. Calculate rasi where resident (for planets)        foreach ($planets as $key=>$value) {            /*            if ($value['longitude'] >= 0 && $value['longitude'] < 30)     $planets[$key]['rasi_where_resident'] = 1;            if ($value['longitude'] >= 30 && $value['longitude'] < 60)    $planets[$key]['rasi_where_resident'] = 2;            if ($value['longitude'] >= 60 && $value['longitude'] < 90)    $planets[$key]['rasi_where_resident'] = 3;            if ($value['longitude'] >= 90 && $value['longitude'] < 120)   $planets[$key]['rasi_where_resident'] = 4;            if ($value['longitude'] >= 120 && $value['longitude'] < 150)  $planets[$key]['rasi_where_resident'] = 5;            if ($value['longitude'] >= 150 && $value['longitude'] < 180)  $planets[$key]['rasi_where_resident'] = 6;            if ($value['longitude'] >= 180 && $value['longitude'] < 210)  $planets[$key]['rasi_where_resident'] = 7;            if ($value['longitude'] >= 210 && $value['longitude'] < 240)  $planets[$key]['rasi_where_resident'] = 8;            if ($value['longitude'] >= 240 && $value['longitude'] < 270)  $planets[$key]['rasi_where_resident'] = 9;            if ($value['longitude'] >= 270 && $value['longitude'] < 300)  $planets[$key]['rasi_where_resident'] = 10;            if ($value['longitude'] >= 300 && $value['longitude'] < 330)  $planets[$key]['rasi_where_resident'] = 11;            if ($value['longitude'] >= 330 && $value['longitude'] < 360)  $planets[$key]['rasi_where_resident'] = 12;             * */            $x = intval(fmod($planets[$key]['longitude'] * 1, 360) / 30) + 1;            $planets[$key]['rasi_where_resident'] = $x;        }    }    function divisional_chart (&$planets, &$chart, &$houses, &$lords, $division=1) {                $planet_names = array (0=>'Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Rahu', 'Ketu', 21=>'Lagna');        if ($division == 1)            $arr = array(1, 2, 3, 7, 9, 12, 30);        else            $arr = array ($division);        foreach ($arr as $division) {            // Calculate rasi where resident for divisional chart            foreach ($planets as $key=>$value) {                $chart[$division][$key]['id'] = $key;                $chart[$division][$key]['name'] = $planets[$key]['name'];                $chart[$division][$key]['longitude'] = $planets[$key]['longitude'];                $chart[$division][$key]['nakshatra'] = $planets[$key]['nakshatra'];                $chart[$division][$key]['degree'] = fmod($planets[$key]['degree'] * $division, 30);                // For the time being assume each planet as functional benefic, we'll modify it later                $chart[$division][$key]['func_nature'] = 'B';                switch ($division) {                    case 1:                    case 6:                    case 7:                    case 8:                    case 9:                    case 11:                    case 16:                    case 20:                    case 27:                        $x = intval(fmod($planets[$key]['longitude'] * $division, 360) / 30) + 1;                        break;                    case 2:                        $x = ($planets[$key]['degree'] > 15) ? $planets[$key]['rasi_where_resident'] - 3 : $planets[$key]['rasi_where_resident'] - 1;                        $x = ($x % 12) + 1;                        break;                    case 3:                        if (intval($planets[$key]['degree'] / 10)+1 == 1)                            $x = $planets[$key]['rasi_where_resident'] - 1;                        else if (intval($planets[$key]['degree'] / 10) == 1)                            $x = $planets[$key]['rasi_where_resident'] + 3;                        else                            $x = $planets[$key]['rasi_where_resident'] + 7;                        $x = ($x % 12) + 1;                        break;                    case 4:                        if (intval($planets[$key]['degree'] / 7.5)+1 == 1)                            $x = $planets[$key]['rasi_where_resident'] - 1;                        else if (intval($planets[$key]['degree'] / 7.5) == 1)                            $x = $planets[$key]['rasi_where_resident'] + 2;                        else if (intval($planets[$key]['degree'] / 7.5) == 2)                            $x = $planets[$key]['rasi_where_resident'] + 5;                        else                            $x = $planets[$key]['rasi_where_resident'] + 8;                        $x = ($x % 12) + 1;                        break;                    case 10:                        if ($planets[$key]['rasi_where_resident']/2 > intval($planets[$key]['rasi_where_resident']/2)) {                            $x = intval($planets[$key]['degree']/3)+$planets[$key]['rasi_where_resident']-1;                        }                        else {                            $x = intval($planets[$key]['degree']/3)+7+$planets[$key]['rasi_where_resident'];                        }                        $x = ($x % 12) + 1;                        break;                    case 12:                        $x = intval(($planets[$key]['degree']*12)/30)+$planets[$key]['rasi_where_resident']-1;                        $x = ($x % 12) + 1;                        break;                    case 24:                        if (($planets[$key]['rasi_where_resident']/2) == intval($planets[$key]['rasi_where_resident']/2))                            $x = intval($planets[$key]['degree']*24/30)+3;                        else                            $x = intval($planets[$key]['degree']*24/30)+4;                        $x = ($x % 12) + 1;                        break;                    case 30:                        if ($planets[$key]['rasi_where_resident']/2 == intval($planets[$key]['rasi_where_resident']/2)) {                            if ($planets[$key]['degree'] < 5)                                $x = 2;                            else if ($planets[$key]['degree'] < 12)                                $x = 6;                            else if ($planets[$key]['degree'] < 20)                                $x = 12;                            else if ($planets[$key]['degree'] < 25)                                $x = 10;                            else                                $x = 8;                        }                        else {                            if ($planets[$key]['degree'] < 5)                                $x = 1;                            else if ($planets[$key]['degree'] < 10)                                $x = 11;                            else if ($planets[$key]['degree'] < 18)                                $x = 9;                            else if ($planets[$key]['degree'] < 25)                                $x = 3;                            else                                $x = 7;                        }                        break;                    case 40:                        if ($planets[$key]['rasi_where_resident']/2 == intval($planets[$key]['rasi_where_resident']/2))                            $x = intval($planets[$key]['degree']*40/30)+6;                        else                            $x = intval($planets[$key]['degree']*40/30);                        $x = ($x % 12) + 1;                        break;                    case 45:                        if (($planets[$key]['rasi_where_resident'] % 3) == 1)                            $x = intval($planets[$key]['degree'] * 45/30);                        else if (($planets[$key]['rasi_where_resident'] % 3) == 2)                            $x = ($planets[$key]['degree']*45/30)+4;                        else                            $x = intval($planets[$key]['degree']*45/30)+8;                        $x = ($x % 12) + 1;                        break;                    case 60:                        $x = intval($planets[$key]['degree']*2)+$planets[$key]['rasi_where_resident']-1;                        $x = ($x % 12) + 1;                        break;                }                // If $x is negative then we need to subtract it from 12                // Eg. -4 will become (12 - 4) = 8                // Hence we are adding it to 12 (12 + (-4)) = 8                                $x = ($x <= 0) ? 12 + $x : $x;                if ($key == PLANET_KETU)                    $chart[$division][$key]['rasi_where_resident'] = (($chart[$division][PLANET_RAHU]['rasi_where_resident']+5) % 12) + 1;                else                    $chart[$division][$key]['rasi_where_resident'] = $x;                // Assume for now that there are no planets qualifying as most malefic or most benefic                $chart[$division][$key]['mmp'] = 0;                $chart[$division][$key]['mbp'] = 0;                // Identifiy maraka planets for each ascendant            }            // Identify MMP & MBP planets for each ascendant            switch ($chart[$division][PLANET_ASCENDANT]['rasi_where_resident']) {                case SIGN_AR: $mmp = PLANET_KETU;                    $mbp = PLANET_MOON;                    $chart[$division][PLANET_MERCURY]['maraka'] = $chart[$division][PLANET_SATURN]['maraka'] = 1;                    break;                case SIGN_TA: $mmp = PLANET_JUPITER;                    $mbp = PLANET_SUN;                    $chart[$division][PLANET_JUPITER]['maraka'] = $chart[$division][PLANET_MARS]['maraka'] = 1;                    break;                case SIGN_GE: $mmp = PLANET_KETU;                    $mbp = PLANET_MERCURY;                    $chart[$division][PLANET_JUPITER]['maraka'] = $chart[$division][PLANET_MARS]['maraka'] = 1;                    break;                case SIGN_CN: $mmp = PLANET_SATURN;                    $mbp = PLANET_VENUS;                    $chart[$division][PLANET_VENUS]['maraka'] = $chart[$division][PLANET_MERCURY]['maraka'] = 1;                    break;                case SIGN_LE: $mmp = PLANET_MOON;                    $mbp = PLANET_MERCURY;                    $chart[$division][PLANET_VENUS]['maraka'] = $chart[$division][PLANET_MERCURY]['maraka'] = 1;                    break;                case SIGN_VI: $mmp = PLANET_MARS;                    $mbp = PLANET_JUPITER;                    $chart[$division][PLANET_JUPITER]['maraka'] = $chart[$division][PLANET_MARS]['maraka'] = 1;                    break;                case SIGN_LI: $mmp = PLANET_MERCURY;                    $mbp = PLANET_JUPITER;                    $chart[$division][PLANET_JUPITER]['maraka'] = 1;                    break;                case SIGN_SC: $mmp = PLANET_VENUS;                    $mbp = PLANET_SATURN;                    $chart[$division][PLANET_VENUS]['maraka'] = $chart[$division][PLANET_MERCURY]['maraka'] = $chart[$division][PLANET_SATURN]['maraka'] = 1;                    break;                case SIGN_SG: $mmp = PLANET_MOON;                    $mbp = PLANET_SUN;                    $chart[$division][PLANET_VENUS]['maraka'] = $chart[$division][PLANET_SATURN]['maraka'] = 1;                    break;                case SIGN_CP: $mmp = PLANET_SUN;                    $mbp = PLANET_MARS;                    $chart[$division][PLANET_JUPITER]['maraka'] = $chart[$division][PLANET_MARS]['maraka'] = 1;                    break;                case SIGN_AQ: $mmp = PLANET_MERCURY;                    $mbp = PLANET_VENUS;                    $chart[$division][PLANET_MARS]['maraka'] = 1;                    break;                case SIGN_PI: $mmp = PLANET_VENUS;                    $mbp = PLANET_MARS;                    $chart[$division][PLANET_VENUS]['maraka'] = $chart[$division][PLANET_MERCURY]['maraka'] = $chart[$division][PLANET_SATURN]['maraka'] = 1;            }            // 12. Calculate bhava where resident (for planets);            foreach ($chart[$division] as $key=>$value) {                if ($value['rasi_where_resident'] >= $chart[$division][PLANET_ASCENDANT]['rasi_where_resident'])                    $chart[$division][$key]['bhava_where_resident'] = $value['rasi_where_resident'] - $chart[$division][PLANET_ASCENDANT]['rasi_where_resident'] + 1;                else                    $chart[$division][$key]['bhava_where_resident'] = $value['rasi_where_resident'] - $chart[$division][PLANET_ASCENDANT]['rasi_where_resident'] + 1 + 12;                if ($key == $mmp) {                    $chart[$division][$key]['mmp'] = 1;                }                if ($key == $mbp) {                    $chart[$division][$key]['mbp'] = 1;                }            }            // 13. Calculate bhava (columns AB - AM)            $houses[$division][1] = $chart[$division][PLANET_ASCENDANT]['rasi_where_resident'];            for ($j = 2; $j <= 12; $j++) {                if ((($houses[$division][$j-1]+1)%12) > 0)                    $houses[$division][$j] = ($houses[$division][$j-1]+1) % 12;                else                    $houses[$division][$j] = 12;            }            // 14. Calculate planets corresponding to lords            for ($i = 1; $i <= 12; $i++) {                if ($houses[$division][$i] == 5)   $lords[$i]['planet'] = 1;                if ($houses[$division][$i] == 4)   $lords[$i]['planet'] = 2;                if ($houses[$division][$i] == 3 || $houses[$division][$i] == 6)   $lords[$i]['planet'] = 3;                if ($houses[$division][$i] == 2 || $houses[$division][$i] == 7)   $lords[$i]['planet'] = 4;                if ($houses[$division][$i] == 1 || $houses[$division][$i] == 8)   $lords[$i]['planet'] = 5;                if ($houses[$division][$i] == 12 || $houses[$division][$i] == 9)   $lords[$i]['planet'] = 6;                if ($houses[$division][$i] == 11 || $houses[$division][$i] == 10)   $lords[$i]['planet'] = 7;                // 15. Calculate rasi where resident (for lords)                $lords[$i]['rasi_where_resident'] = $chart[$division][$lords[$i]['planet']-1]['rasi_where_resident'];                // 16. Calculate bhava where resident (for lords)                $lords[$i]['bhava_where_resident'] = $chart[$division][$lords[$i]['planet']-1]['bhava_where_resident'];                // 17. Calculate nakshatra number (for lords)                $lords[$i]['nakshatra'] = $chart[$division][$lords[$i]['planet']-1]['nakshatra'];                // 18. Calculate longitude (for lords)                $lords[$i]['longitude'] = $chart[$division][$lords[$i]['planet']-1]['longitude'];                // Ascertain functional benefic / malefic nature of planets                // Rahu and Ketu are functional malefics for all charts.                // The other FMs are those planets whose Mooltrikona (MT) sign falls in the dusthana (inauspicious) houses,                // that is the 6th, 8th, and 12th houses from the ascendant                if ($i == 6 || $i == 8 || $i == 12) {                    switch ($houses[$division][$i]) {                        case SIGN_LE:   // Moolatrikona for Sun                        case SIGN_CN:   // Moolatrikona for Moon                        case SIGN_AR:   // Moolatrikona for Mars                        case SIGN_VI:   // Moolatrikona for Mercury                        case SIGN_SG:   // Moolatrikona for Jupiter                        case SIGN_LI:   // Moolatrikona for Venus                        case SIGN_AQ:   // Moolatrikona for Saturn                            $chart[$division][$this->sign_lords[$houses[$division][$i]]]['func_nature'] = 'M';                            break;                    }                }            }            // Rahu & Ketu are always malefics            $chart[$division][PLANET_RAHU]['func_nature'] = $chart[$division][PLANET_KETU]['func_nature'] = 'M';            // PAC Calculations - Positions            // 19. Calculate flag for exalted position (for planets)            // The following conditional blocks are for the simple reason that I don't know how to            // calculate longitudes for divisional charts, and longitude based conditions seem to be more            // accurate for calculating exaltation, debilitation, moolatrikona etc. flags            if ($division == 1) {                $chart[$division][PLANET_SUN]['exalted'] = ($chart[$division][PLANET_SUN]['longitude'] > 0 && $chart[$division][PLANET_SUN]['longitude'] <= 30) ? 1 : 0;                $chart[$division][PLANET_MOON]['exalted'] = ($chart[$division][PLANET_MOON]['longitude'] > 30 && $chart[$division][PLANET_MOON]['longitude'] <= 33) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['exalted'] = ($chart[$division][PLANET_MERCURY]['longitude'] > 150 && $chart[$division][PLANET_MERCURY]['longitude'] <= 165) ? 1 : 0;                $chart[$division][PLANET_VENUS]['exalted'] = ($chart[$division][PLANET_VENUS]['longitude'] > 330 && $chart[$division][PLANET_VENUS]['longitude'] <= 357) ? 1 : 0;                $chart[$division][PLANET_MARS]['exalted'] = ($chart[$division][PLANET_MARS]['longitude'] > 270 && $chart[$division][PLANET_MARS]['longitude'] <= 298) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['exalted'] = ($chart[$division][PLANET_JUPITER]['longitude'] > 90 && $chart[$division][PLANET_JUPITER]['longitude'] <= 95) ? 1 : 0;                $chart[$division][PLANET_SATURN]['exalted'] = ($chart[$division][PLANET_SATURN]['longitude'] > 180 && $chart[$division][PLANET_SATURN]['longitude'] <= 200) ? 1 : 0;            }            else {                $chart[$division][PLANET_SUN]['exalted'] = ($chart[$division][PLANET_SUN]['rasi_where_resident'] == SIGN_AR) ? 1 : 0;                $chart[$division][PLANET_MOON]['exalted'] = ($chart[$division][PLANET_MOON]['rasi_where_resident'] == SIGN_TA) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['exalted'] = ($chart[$division][PLANET_MERCURY]['rasi_where_resident'] == SIGN_VI) ? 1 : 0;                $chart[$division][PLANET_VENUS]['exalted'] = ($chart[$division][PLANET_VENUS]['rasi_where_resident'] == SIGN_PI) ? 1 : 0;                $chart[$division][PLANET_MARS]['exalted'] = ($chart[$division][PLANET_MARS]['rasi_where_resident'] == SIGN_CP) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['exalted'] = ($chart[$division][PLANET_JUPITER]['rasi_where_resident'] == SIGN_CN) ? 1 : 0;                $chart[$division][PLANET_SATURN]['exalted'] = ($chart[$division][PLANET_SATURN]['rasi_where_resident'] == SIGN_LI) ? 1 : 0;            }            // 20. Calculate flag for debilitated position (for planets)            if ($division == 1) {                $chart[$division][PLANET_SUN]['debilitated'] = ($chart[$division][PLANET_SUN]['longitude'] > 180 && $chart[$division][PLANET_SUN]['longitude'] <= 190) ? 1 : 0;                $chart[$division][PLANET_MOON]['debilitated'] = ($chart[$division][PLANET_MOON]['longitude'] > 210 && $chart[$division][PLANET_MOON]['longitude'] <= 213) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['debilitated'] = ($chart[$division][PLANET_MERCURY]['longitude'] > 330 && $chart[$division][PLANET_MERCURY]['longitude'] <= 345) ? 1 : 0;                $chart[$division][PLANET_VENUS]['debilitated'] = ($chart[$division][PLANET_VENUS]['longitude'] > 150 && $chart[$division][PLANET_VENUS]['longitude'] <= 177) ? 1 : 0;                $chart[$division][PLANET_MARS]['debilitated'] = ($chart[$division][PLANET_MARS]['longitude'] > 90 && $chart[$division][PLANET_MARS]['longitude'] <= 118) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['debilitated'] = ($chart[$division][PLANET_JUPITER]['longitude'] > 270 && $chart[$division][PLANET_JUPITER]['longitude'] <= 275) ? 1 : 0;                $chart[$division][PLANET_SATURN]['debilitated'] = ($chart[$division][PLANET_SATURN]['longitude'] > 0 && $chart[$division][PLANET_SATURN]['longitude'] <= 20) ? 1 : 0;            }            else {                $chart[$division][PLANET_SUN]['debilitated'] = ($chart[$division][PLANET_SUN]['rasi_where_resident'] == SIGN_LI) ? 1 : 0;                $chart[$division][PLANET_MOON]['debilitated'] = ($chart[$division][PLANET_MOON]['rasi_where_resident'] == SIGN_SC) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['debilitated'] = ($chart[$division][PLANET_MERCURY]['rasi_where_resident'] == SIGN_PI) ? 1 : 0;                $chart[$division][PLANET_VENUS]['debilitated'] = ($chart[$division][PLANET_VENUS]['rasi_where_resident'] == SIGN_VI) ? 1 : 0;                $chart[$division][PLANET_MARS]['debilitated'] = ($chart[$division][PLANET_MARS]['rasi_where_resident'] == SIGN_CN) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['debilitated'] = ($chart[$division][PLANET_JUPITER]['rasi_where_resident'] == SIGN_CP) ? 1 : 0;                $chart[$division][PLANET_SATURN]['debilitated'] = ($chart[$division][PLANET_SATURN]['rasi_where_resident'] == SIGN_AR) ? 1 : 0;            }            // 21. Calculate flag for moolatrikona position (for planets)            if ($division == 1) {                $chart[$division][PLANET_SUN]['moolatrikona'] = ($chart[$division][PLANET_SUN]['longitude'] > 120 && $chart[$division][PLANET_SUN]['longitude'] <= 140) ? 1 : 0;                $chart[$division][PLANET_MOON]['moolatrikona'] = ($chart[$division][PLANET_MOON]['longitude'] > 30 && $chart[$division][PLANET_MOON]['longitude'] <= 57) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['moolatrikona'] = ($chart[$division][PLANET_MERCURY]['longitude'] > 150 && $chart[$division][PLANET_MERCURY]['longitude'] <= 170) ? 1 : 0;                $chart[$division][PLANET_VENUS]['moolatrikona'] = ($chart[$division][PLANET_VENUS]['longitude'] > 180 && $chart[$division][PLANET_VENUS]['longitude'] <= 195) ? 1 : 0;                $chart[$division][PLANET_MARS]['moolatrikona'] = ($chart[$division][PLANET_MARS]['longitude'] > 0 && $chart[$division][PLANET_MARS]['longitude'] <= 12) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['moolatrikona'] = ($chart[$division][PLANET_JUPITER]['longitude'] > 240 && $chart[$division][PLANET_JUPITER]['longitude'] <= 250) ? 1 : 0;                $chart[$division][PLANET_SATURN]['moolatrikona'] = ($chart[$division][PLANET_SATURN]['longitude'] > 300 && $chart[$division][PLANET_SATURN]['longitude'] <= 320) ? 1 : 0;            }            else {                $chart[$division][PLANET_SUN]['moolatrikona'] = ($chart[$division][PLANET_SUN]['rasi_where_resident'] == SIGN_LE) ? 1 : 0;                $chart[$division][PLANET_MOON]['moolatrikona'] = ($chart[$division][PLANET_MOON]['rasi_where_resident'] == SIGN_TA) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['moolatrikona'] = ($chart[$division][PLANET_MERCURY]['rasi_where_resident'] == SIGN_VI) ? 1 : 0;                $chart[$division][PLANET_VENUS]['moolatrikona'] = ($chart[$division][PLANET_VENUS]['rasi_where_resident'] == SIGN_LI) ? 1 : 0;                $chart[$division][PLANET_MARS]['moolatrikona'] = ($chart[$division][PLANET_MARS]['rasi_where_resident'] == SIGN_AR) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['moolatrikona'] = ($chart[$division][PLANET_JUPITER]['rasi_where_resident'] == SIGN_SG) ? 1 : 0;                $chart[$division][PLANET_SATURN]['moolatrikona'] = ($chart[$division][PLANET_SATURN]['rasi_where_resident'] == SIGN_AQ) ? 1 : 0;            }            // 22. Calculate flag for position in own house (for planets)            if ($division == 1) {                $chart[$division][PLANET_SUN]['ownhouse'] = ($chart[$division][PLANET_SUN]['longitude'] > 140 && $chart[$division][PLANET_SUN]['longitude'] <= 150) ? 1 : 0;                $chart[$division][PLANET_MOON]['ownhouse'] = ($chart[$division][PLANET_MOON]['longitude'] > 90 && $chart[$division][PLANET_MOON]['longitude'] <= 120) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['ownhouse'] =                        (($chart[$division][PLANET_MERCURY]['longitude'] >= 80 && $chart[$division][PLANET_MERCURY]['longitude'] <= 90) ||                                ($chart[$division][PLANET_MERCURY]['longitude'] >= 170 && $chart[$division][PLANET_MERCURY]['longitude'] <= 180)) ? 1: 0;                $chart[$division][PLANET_VENUS]['ownhouse'] =                        (($chart[$division][PLANET_VENUS]['longitude'] >= 45 && $chart[$division][PLANET_VENUS]['longitude'] <= 60) ||                                ($chart[$division][PLANET_VENUS]['longitude'] >= 195 && $chart[$division][PLANET_VENUS]['longitude'] <= 210)) ? 1: 0;                $chart[$division][PLANET_MARS]['ownhouse'] =                        (($chart[$division][PLANET_MARS]['longitude'] >= 222 && $chart[$division][PLANET_MARS]['longitude'] <= 240) ||                                ($chart[$division][PLANET_MARS]['longitude'] > 12 && $chart[$division][PLANET_MARS]['longitude'] <= 30)) ? 1: 0;                $chart[$division][PLANET_JUPITER]['ownhouse'] =                        (($chart[$division][PLANET_JUPITER]['longitude'] >= 340 && $chart[$division][PLANET_JUPITER]['longitude'] <= 360) ||                                ($chart[$division][PLANET_JUPITER]['longitude'] >= 250 && $chart[$division][PLANET_JUPITER]['longitude'] <= 270)) ? 1: 0;                $chart[$division][PLANET_SATURN]['ownhouse'] =                        (($chart[$division][PLANET_SATURN]['longitude'] >= 290 && $chart[$division][PLANET_SATURN]['longitude'] <= 300) ||                                ($chart[$division][PLANET_SATURN]['longitude'] > 320 && $chart[$division][PLANET_SATURN]['longitude'] <= 330)) ? 1: 0;            }            else {                $chart[$division][PLANET_SUN]['ownhouse'] = ($chart[$division][PLANET_SUN]['rasi_where_resident'] == SIGN_LE) ? 1 : 0;                $chart[$division][PLANET_MOON]['ownhouse'] = ($chart[$division][PLANET_MOON]['rasi_where_resident'] == SIGN_CN) ? 1 : 0;                $chart[$division][PLANET_MERCURY]['ownhouse'] =                        ($chart[$division][PLANET_MERCURY]['rasi_where_resident'] == SIGN_GE ||                                $chart[$division][PLANET_MERCURY]['rasi_where_resident'] == SIGN_VI) ? 1 : 0;                $chart[$division][PLANET_VENUS]['ownhouse'] =                        ($chart[$division][PLANET_VENUS]['rasi_where_resident'] == SIGN_TA ||                                $chart[$division][PLANET_VENUS]['rasi_where_resident'] == SIGN_LI) ? 1 : 0;                $chart[$division][PLANET_MARS]['ownhouse'] =                        ($chart[$division][PLANET_MARS]['rasi_where_resident'] == SIGN_AR ||                                $chart[$division][PLANET_MARS]['rasi_where_resident'] == SIGN_SC) ? 1 : 0;                $chart[$division][PLANET_JUPITER]['ownhouse'] =                        ($chart[$division][PLANET_JUPITER]['rasi_where_resident'] == SIGN_SG ||                                $chart[$division][PLANET_JUPITER]['rasi_where_resident'] == SIGN_PI) ? 1 : 0;                $chart[$division][PLANET_SATURN]['ownhouse'] =                        ($chart[$division][PLANET_SATURN]['rasi_where_resident'] == SIGN_CP ||                                $chart[$division][PLANET_SATURN]['rasi_where_resident'] == SIGN_AQ) ? 1 : 0;            }            // 23. Calcualte flag for position in friendly house (for planets)            $x = $chart[$division][PLANET_SUN]['rasi_where_resident'];            $chart[$division][PLANET_SUN]['friendhouse'] = ($x == 4 || $x == 1 || $x == 8 || $x == 9 || $x == 12) ? 1 : 0;            $x = $chart[$division][PLANET_MOON]['rasi_where_resident'];            $chart[$division][PLANET_MOON]['friendhouse'] = ($x == 5 || $x == 3 || $x == 6) ? 1 : 0;            $x = $chart[$division][PLANET_MERCURY]['rasi_where_resident'];            $chart[$division][PLANET_MERCURY]['friendhouse'] = ($x == 5 || $x == 2 || $x == 7) ? 1 : 0;            $x = $chart[$division][PLANET_VENUS]['rasi_where_resident'];            $chart[$division][PLANET_VENUS]['friendhouse'] = ($x == 3 || $x == 6) ? 1 : 0;            $x = $chart[$division][PLANET_MARS]['rasi_where_resident'];            $chart[$division][PLANET_MARS]['friendhouse'] = ($x == 5 || $x == 4 || $x == 9 || $x == 12) ? 1 : 0;            $x = $chart[$division][PLANET_JUPITER]['rasi_where_resident'];            $chart[$division][PLANET_JUPITER]['friendhouse'] = ($x == 5 || $x == 4 || $x == 1 || $x == 8) ? 1 : 0;            $x = $chart[$division][PLANET_SATURN]['rasi_where_resident'];            $chart[$division][PLANET_SATURN]['friendhouse'] = ($x == 3 || $x == 6) ? 1 : 0;            // 24. Calcualte flag for position in hostile house (for planets)            $x = $chart[$division][PLANET_SUN]['rasi_where_resident'];            $chart[$division][PLANET_SUN]['hostilehouse'] = ($x == 2 || $x == 7 || $x == 10 || $x == 11) ? 1 : 0;            $x = $chart[$division][PLANET_MOON]['rasi_where_resident'];            $chart[$division][PLANET_MOON]['hostilehouse'] = 0;  // Moon does not have enemies            $x = $chart[$division][PLANET_MERCURY]['rasi_where_resident'];            $chart[$division][PLANET_MERCURY]['hostilehouse'] = ($x == 4) ? 1 : 0;            $x = $chart[$division][PLANET_VENUS]['rasi_where_resident'];            $chart[$division][PLANET_VENUS]['hostilehouse'] = ($x == 5 || $x == 4 || $x == 1 || $x == 8) ? 1 : 0;            $x = $chart[$division][PLANET_MARS]['rasi_where_resident'];            $chart[$division][PLANET_MARS]['hostilehouse'] = ($x == 3 || $x == 6) ? 1 : 0;            $x = $chart[$division][PLANET_JUPITER]['rasi_where_resident'];            $chart[$division][PLANET_JUPITER]['hostilehouse'] = ($x == 3 || $x == 6 || $x == 2 || $x == 7) ? 1 : 0;            $x = $chart[$division][PLANET_SATURN]['rasi_where_resident'];            $chart[$division][PLANET_SATURN]['hostilehouse'] = ($x == 5 || $x == 4) ? 1 : 0;            // 25. Calcualte flag for position in neutral house (for planets)            $x = $chart[$division][PLANET_SUN]['rasi_where_resident'];            $chart[$division][PLANET_SUN]['neutralhouse'] = ($x == 3 || $x == 6) ? 1 : 0;            $x = $chart[$division][PLANET_MOON]['rasi_where_resident'];            $chart[$division][PLANET_MOON]['neutralhouse'] = ($x==1 || $x==8 || $x==9 || $x==12 || $x==2 || $x==7 || $x==10 || $x==11) ? 1 : 0;            $x = $chart[$division][PLANET_MERCURY]['rasi_where_resident'];            $chart[$division][PLANET_MERCURY]['neutralhouse'] = ($x == 1 || $x == 8 || $x == 9 || $x == 10 || $x == 11 || $x == 12) ? 1 : 0;            $x = $chart[$division][PLANET_VENUS]['rasi_where_resident'];            $chart[$division][PLANET_VENUS]['neutralhouse'] = ($x == 9 || $x == 12) ? 1 : 0;            $x = $chart[$division][PLANET_MARS]['rasi_where_resident'];            $chart[$division][PLANET_MARS]['neutralhouse'] = ($x == 10 || $x == 11 || $x == 2 || $x == 7) ? 1 : 0;            $x = $chart[$division][PLANET_JUPITER]['rasi_where_resident'];            $chart[$division][PLANET_JUPITER]['neutralhouse'] = ($x == 10 || $x == 11) ? 1 : 0;            $x = $chart[$division][PLANET_SATURN]['rasi_where_resident'];            $chart[$division][PLANET_SATURN]['neutralhouse'] = ($x == 1 || $x == 8 || $x == 9 || $x == 12) ? 1 : 0;            // 26. Natural malefic planets            $chart[$division][PLANET_SUN]['malefic'] = $chart[$division][PLANET_MARS]['malefic'] = $chart[$division][PLANET_SATURN]['malefic'] =                    $chart[$division][PLANET_RAHU]['malefic'] = $chart[$division][PLANET_KETU]['malefic'] = 1;            $chart[$division][PLANET_MERCURY]['malefic'] = $chart[$division][PLANET_VENUS]['malefic'] = $chart[$division][PLANET_JUPITER]['malefic'] =                    $chart[$division][PLANET_MOON]['malefic'] = 0;            // 28, 29, 30, 31, 32, 33            for ($i = 1; $i <= 12; $i++) {                // 15. Calculate rasi where resident (for lords)                $lords[$i]['exalted'] = $chart[$division][$lords[$i]['planet']-1]['exalted'];                $lords[$i]['debilitated'] = $chart[$division][$lords[$i]['planet']-1]['debilitated'];                $lords[$i]['moolatrikona'] = $chart[$division][$lords[$i]['planet']-1]['moolatrikona'];                $lords[$i]['neutralhouse'] = $chart[$division][$lords[$i]['planet']-1]['neutralhouse'];                $lords[$i]['hostilehouse'] = $chart[$division][$lords[$i]['planet']-1]['hostilehouse'];                $lords[$i]['malefic'] = $chart[$division][$lords[$i]['planet']-1]['malefic'];            }            // PAC Calculations - Aspects            // 34. Calculate flag for Sun's aspect            // Loop for 'aspect on' planet            foreach ($planets as $key=>$aspect_on) {                $chart[$division][$key]['aspected_by_planet'] = array();                // Loop for 'aspect by' planet                foreach ($planets as $key2=>$aspect_by) {                    if (($key == PLANET_RAHU || $key == PLANET_KETU) && ($key2 == PLANET_RAHU || $key2 == PLANET_KETU))                        continue;                    $aspects = null;                    $aspects = array();                    switch ($key2) {                        case PLANET_ASCENDANT:                            break;                        case PLANET_SUN:                        case PLANET_MOON:                        case PLANET_MERCURY:                        case PLANET_VENUS:                        case PLANET_RAHU:                        case PLANET_KETU:                            $aspects[0] = 6;                            break;                        case PLANET_MARS:                            $aspects[0] = 6;                            $aspects[1] = 3;                            $aspects[2] = 7;                            break;                        case PLANET_JUPITER:                            $aspects[0] = 6;                            $aspects[1] = 4;                            $aspects[2] = 8;                            break;                        case PLANET_SATURN:                            $aspects[0] = 6;                            $aspects[1] = 2;                            $aspects[2] = 9;                            break;                    }                    $aspect_flag = 0;                    foreach ($aspects as $aspect) {                        $x = ($chart[$division][$key2]['rasi_where_resident']+$aspect) % 12;                        $x = $x > 0 ? $x : 12;                        if ($x > 0 && $key2 < PLANET_ASCENDANT) {                            if ($x == $chart[$division][$key]['rasi_where_resident']) {                                $aspect_flag++;                                //echo " " . $chart[$division][$key]['name'] . " aspected by " . $chart[$division][$key2]['name'] . "<br>";                            }                        }                    }                    $aspect_flag = $aspect_flag > 0 ? 1 : 0;                    $chart[$division][$key]['aspected_by_planet'][$key2] = $aspect_flag;                }            }        }        $this->calc_shadbala ($planets, $chart, $houses, $lords);//        print_r ($houses);//        print_r ($lords);    }    function calc_shadbala (&$planets, &$chart, &$houses, &$lords) {        foreach ($planets as $key=>$value) {            if ($key != PLANET_RAHU && $key != PLANET_KETU && $key != PLANET_ASCENDANT)                $sthana_bala = $this->calc_sthana_bala ($key, $planets, $chart, $houses, $lords);        }    }    // Positional strength    function calc_sthana_bala ($planet, &$planets, $chart, $houses, $lords) {        // Calculate Uchcha Bala - Divisional strength        $deb_deg = ($this->PLANET_CONFIG[$planet]['DR'] - 1) * 30 + $this->PLANET_CONFIG[$planet]['DD'];        $x = abs($planets[$planet]['longitude'] - $deb_deg);        $x = $x > 180 ? 360 - $x : $x;        $uchcha_bala = round($x / 3, 2);        $planets[$planet]['shadbala']['sthana']['uchcha'] = $uchcha_bala;        // Calculate Saptavargaja Bala - Strength of exaltation        $planets[$planet]['shadbala']['sthana']['saptavargaja'] =                $this->calc_saptavargaja_bala ($planet, $planets, $chart, $houses, $lords);        // Calculate Ojhayugmariamsa Bala - strength related to placement in odd/even Rasis and Navamsas        if ($planet == PLANET_MOON || $planet == PLANET_VENUS) {            // Female planets (Moon, Venus) get 15 virupas if placed in even Rasi/Navamsa, otherwise 0            $x1 = (fmod($chart[1][$planet]['rasi_where_resident'], 2) == 0) ? 15 : 0;            $x9 = (fmod($chart[9][$planet]['rasi_where_resident'], 2) == 0) ? 15 : 0;        }        else {            // Other planets get 15 virupas if placed in odd Rasi/Navamsa, otherwise 0            $x1 = (fmod($chart[1][$planet]['rasi_where_resident'], 2) > 0) ? 15 : 0;            $x9 = (fmod($chart[9][$planet]['rasi_where_resident'], 2) > 0) ? 15 : 0;        }        $planets[$planet]['shadbala']['sthana']['ojha'] = $x1 + $x9;        // Calculate Kendradi Bala - strength of placement in angle, succedent or cadent houses        switch ($chart[1][$planet]['bhava_where_resident']) {            case 1: case 4: case 7: case 10:                $planets[$planet]['shadbala']['sthana']['kendradi'] = 60;                break;            case 2: case 5: case 8: case 11:                $planets[$planet]['shadbala']['sthana']['kendradi'] = 30;                break;            case 3: case 6: case 9: case 12:                $planets[$planet]['shadbala']['sthana']['kendradi'] = 15;                break;        }        // Calculate Drekkana Bala - strength according to Drekkana placement of planets        if ($planet == PLANET_SUN || $planet == PLANET_MARS || $planet == PLANET_JUPITER) {            if ($planets[$planet]['degree'] <= 10)                $planets[$planet]['shadbala']['sthana']['drekkana'] = 15;            else                $planets[$planet]['shadbala']['sthana']['drekkana'] = 0;        }        if ($planet == PLANET_MERCURY || $planet == PLANET_SATURN) {            if ($planets[$planet]['degree'] >= 10 && $planets[$planet]['degree'] <= 20)                $planets[$planet]['shadbala']['sthana']['drekkana'] = 15;            else                $planets[$planet]['shadbala']['sthana']['drekkana'] = 0;        }        if ($planet == PLANET_MOON || $planet == PLANET_VENUS) {            if ($planets[$planet]['degree'] >= 20)                $planets[$planet]['shadbala']['sthana']['drekkana'] = 15;            else                $planets[$planet]['shadbala']['sthana']['drekkana'] = 0;        }    }    function calc_saptavargaja_bala ($planet, $planets, $chart, $houses, $lords) {        $divarray = array (1, 2, 3, 7, 9, 12, 30);        $div_strength = array();        $saptavargaja_bala = 0;        foreach ($divarray as $div) {            // Assign 45 virupas for planet occupying moolatrikona sign            if ($chart[$div][$planet]['rasi_where_resident'] == $this->PLANET_CONFIG[$planet]['MT']) {                $div_strength[$div] = 45;                $saptavargaja_bala += 45;                continue;            }            // Assign 30 virupas for planet occupying own rasi            if ($planet == $this->get_rasi_lord($chart[$div][$planet]['rasi_where_resident'])) {                $div_strength[$div] = 30;                $saptavargaja_bala += 45;                continue;            }                                    $natural_relationship = $this->natural_relationship($planet, $chart[$div][$planet]['rasi_where_resident']);            $temporary_relationship = $this->temporary_relationship($div, $chart, $planet,                    $this->get_rasi_lord($chart[$div][$planet]['rasi_where_resident']));            $compound_relationship = $natural_relationship + $temporary_relationship;            // Assign virupas based on compound relationship status            switch ($compound_relationship) {                case 2:                    $div_strength[$div] = 22.5;     // Extreme Friend                    break;                case 1:                    $div_strength[$div] = 15;       // Friend                    break;                case 0:                    $div_strength[$div] = 7.5;      // Neutral                    break;                case -1:                    $div_strength[$div] = 3.75;     // Enemy                    break;                case -2:                    $div_strength[$div] = 1.875;    // Extreme Enemy                    break;            }            $saptavargaja_bala += $div_strength[$div];        }        return $saptavargaja_bala;    }    // Directional strength    function calc_dig_bala ($planets, $chart, $houses, $lords) {    }    // Temporal strength    function calc_kala_bala ($planets, $chart, $houses, $lords) {        // Calculate Nathonatha Bala - diurnal/nocturnal strength        // Calculate Paksha Bala - strength related to Lunar phase        // Calculate Tribhaga Bala - strength related to portions of the day/night        // Calculate Varsha-Masa-Dina-Hora Bala - strength of astrological year, month, day and hour        // Calculate Yudhdha Bala - strength caused by planetary war        // Calculate Ayana Bala - equinotical strength    }    // Motional strength    function calc_cheshta_bala ($planets, $chart, $houses, $lords) {    }    // Natural strength    function calc_naisargika_bala ($planets, $chart, $houses, $lords) {    }    // Aspectual strength    function calc_drig_bala ($planets, $chart, $houses, $lords) {    }    // Natural Friend: 1, Natural Neutral: 0, Natural Enemy: -1    function natural_relationship ($planet, $resident_rasi) {        $relationship_matrix = array (                PLANET_SUN => array(PLANET_MOON => 1, PLANET_MARS => 1, PLANET_JUPITER => 1, PLANET_MERCURY => 0, PLANET_VENUS => -1, PLANET_SATURN => -1),                PLANET_MOON => array (PLANET_SUN => 1, PLANET_MERCURY => 1, PLANET_MARS => 0, PLANET_JUPITER => 0, PLANET_VENUS => 0, PLANET_SATURN => 0),                PLANET_MARS => array (PLANET_SUN => 1, PLANET_MOON => 1, PLANET_JUPITER => 1, PLANET_VENUS => 0, PLANET_SATURN => 0, PLANET_MERCURY => -1),                PLANET_MERCURY => array (PLANET_SUN => 1, PLANET_VENUS => 1, PLANET_MARS => 0, PLANET_JUPITER => 0, PLANET_SATURN => 0, PLANET_MOON => -1),                PLANET_JUPITER => array (PLANET_SUN => 1, PLANET_MOON => 1, PLANET_MARS => 1, PLANET_SATURN => 0, PLANET_MERCURY => -1, PLANET_VENUS => -1),                PLANET_VENUS => array (PLANET_MERCURY => 1, PLANET_SATURN => 1, PLANET_MARS => 0, PLANET_JUPITER => 0, PLANET_SUN => -1, PLANET_MOON => -1),                PLANET_SATURN => array (PLANET_MERCURY => 1, PLANET_VENUS => 1, PLANET_JUPITER => 0, PLANET_SUN => -1, PLANET_MOON => -1, PLANET_MARS => -1)        );        $rasi_lord = $this->get_rasi_lord($resident_rasi);        return $relationship_matrix[$planet][$rasi_lord];    }    // Temporary Friend: 1, Temporary Neutral: 0, Temporary Enemy: -1    function temporary_relationship ($division, $chart, $planet, $other_planet) {        // Planets occupying 2nd, 3rd, 4th, 10th, 11th, 12th rasis counted from        // the rasi occupied by a planet are its temporary friends        $arr = array (2, 3, 4, 10, 11, 12);        $house = array();        foreach ($arr as $a) {            $house[$a] = $this->get_nth_rasi_from_house($chart[$division][$planet]['bhava_where_resident'], $a);        }        $ret = -1;        foreach ($chart[$division] as $c) {            if ($c['id'] == $other_planet) {                foreach ($house as $h) {                    if ($c['bhava_where_resident'] == $h)                        $ret = 1;                }            }        }        return $ret;    }    function get_nth_rasi_from_house($start, $n) {        $start = $start -1;        if ($start == 0)            $start = 12;        $x = $start + $n;        if ($x > 12)            $x = $x - 12;        return $x;    }    // Used to find position of planet from natal moon (src)    function get_position_from_sign ($src, $dest) {        $ret = ($src > $dest) ? (12 - $src + $dest + 1) : (12 - $dest + $src + 1);        $ret = ($src == $dest) ? 1 : $ret;        return $ret;    }    function get_rasi_lord ($rasi) {        $lord = null;        switch ($rasi) {            case SIGN_AR:            case SIGN_SC:                $lord = PLANET_MARS;                break;            case SIGN_TA:            case SIGN_LI:                $lord = PLANET_VENUS;                break;            case SIGN_GE:            case SIGN_VI:                $lord = PLANET_MERCURY;                break;            case SIGN_CN:                $lord = PLANET_MOON;                break;            case SIGN_LE:                $lord = PLANET_SUN;                break;            case SIGN_SG:            case SIGN_PI:                $lord = PLANET_JUPITER;                break;            case SIGN_CP:            case SIGN_AQ:                $lord = PLANET_SATURN;                break;        }        return $lord;    }    function get_transit_predictions_count($sess_uid, $uid, $transits_array, $transit_houses_array) {        // First fetch transit interpretations for transit_type=1 (planet position with respect to natal moon)        $houses_clause  = " and ((planet = 'Sun' and transiting_house = " . $transit_houses_array['Su'] . ")";        $houses_clause .= " or (planet = 'Moon' and transiting_house = " . $transit_houses_array['Mo'] . ")";        $houses_clause .= " or (planet = 'Mars' and transiting_house = " . $transit_houses_array['Ma'] . ")";        $houses_clause .= " or (planet = 'Mercury' and transiting_house = " . $transit_houses_array['Me'] . ")";        $houses_clause .= " or (planet = 'Jupiter' and transiting_house = " . $transit_houses_array['Ju'] . ")";        $houses_clause .= " or (planet = 'Venus' and transiting_house = " . $transit_houses_array['Ve'] . ")";        $houses_clause .= " or (planet = 'Saturn' and transiting_house = " . $transit_houses_array['Sa'] . ")";        $houses_clause .= " or (planet = 'Rahu' and transiting_house = " . $transit_houses_array['Ra'] . ")";        $houses_clause .= " or (planet = 'Ketu' and transiting_house = " . $transit_houses_array['Ke'] . "))";        $sql  = "select count(*) as cnt from transit_interpretations_t tit";        $sql .= " where transit_type = 1";        $sql .= " $houses_clause";        //log_message ('error', $sql);        $query = $this->db->query ($sql);        if ($query) {            $row = $query->row();            return $row->cnt;        }        else {            return 0;        }    }    function get_transit_predictions($offset=0, $limit=5, $sess_uid, $uid, $transits_array, $transit_houses_array) {        // First fetch transit interpretations for transit_type=1 (planet position with respect to natal moon)        $houses_clause  = " and ((planet = 'Sun' and transiting_house = " . $transit_houses_array['Su'] . ")";        $houses_clause .= " or (planet = 'Moon' and transiting_house = " . $transit_houses_array['Mo'] . ")";        $houses_clause .= " or (planet = 'Mars' and transiting_house = " . $transit_houses_array['Ma'] . ")";        $houses_clause .= " or (planet = 'Mercury' and transiting_house = " . $transit_houses_array['Me'] . ")";        $houses_clause .= " or (planet = 'Jupiter' and transiting_house = " . $transit_houses_array['Ju'] . ")";        $houses_clause .= " or (planet = 'Venus' and transiting_house = " . $transit_houses_array['Ve'] . ")";        $houses_clause .= " or (planet = 'Saturn' and transiting_house = " . $transit_houses_array['Sa'] . ")";        $houses_clause .= " or (planet = 'Rahu' and transiting_house = " . $transit_houses_array['Ra'] . ")";        $houses_clause .= " or (planet = 'Ketu' and transiting_house = " . $transit_houses_array['Ke'] . "))";        $sql  = "select interpretation_id, transit_descr, transit_id, planet, transiting_house, category_id, weight,";        $sql .= " abstract, detailed, comments, likes";        $sql .= " from transit_interpretations_t";        $sql .= " where transit_type = 1";        $sql .= " $houses_clause";        $sql .= " limit $limit offset $offset";        $query = $this->db->query ($sql);        //log_message ('error', $sql);        if ($query)            return $query->result();        else            return null;    }    function get_detail_transit_interpretation ($interpretation_id) {        $sql  = "select interpretation_id, transit_descr, transit_id, planet, transiting_house, category_id,";        $sql .= " abstract, detailed, comments, likes";        $sql .= " from transit_interpretations_t";        $sql .= " where interpretation_id = $interpretation_id";        $query = $this->db->query ($sql);        if ($query) {            if ($query->num_rows() > 0) {                $row = $query->row();                return $row;            }            else                return null;        }        else {            return null;        }    }}?>